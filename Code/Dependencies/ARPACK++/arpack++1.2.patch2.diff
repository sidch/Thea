diff -rupN arpack++.orig/include/arbgcomp.h arpack++.patched/include/arbgcomp.h
--- arpack++.orig/include/arbgcomp.h	2009-10-20 02:59:32.000000000 -0700
+++ arpack++.patched/include/arbgcomp.h	2009-10-22 19:47:26.000000000 -0700
@@ -3,7 +3,7 @@
    c++ interface to ARPACK code.
 
    MODULE ARBGComp.h.
-   Arpack++ class ARluCompGenEig definition
+   Arpack++ class ARbdCompGenEig definition
    (band matrix version).
 
    ARPACK Authors
@@ -27,7 +27,7 @@
 
 
 template<class ARFLOAT>
-class ARluCompGenEig:
+class ARbdCompGenEig:
   public virtual
     ARCompGenEig<ARFLOAT, ARbdNonSymPencil<arcomplex<ARFLOAT>, ARFLOAT >,
                  ARbdNonSymPencil<arcomplex<ARFLOAT>, ARFLOAT > > {
@@ -40,7 +40,7 @@ class ARluCompGenEig:
 
  // b) Protected functions:
 
-  virtual void Copy(const ARluCompGenEig& other);
+  virtual void Copy(const ARbdCompGenEig& other);
   // Makes a deep copy of "other" over "this" object.
   // Old values are not deleted (this function is to be used
   // by the copy constructor and the assignment operator only).
@@ -60,44 +60,44 @@ class ARluCompGenEig:
 
  // c.2) Constructors and destructor.
 
-  ARluCompGenEig() { }
+  ARbdCompGenEig() { }
   // Short constructor.
 
-  ARluCompGenEig(int nevp, ARbdNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
+  ARbdCompGenEig(int nevp, ARbdNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
                  ARbdNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& B,
                  char* whichp = "LM", int ncvp = 0,
                  ARFLOAT tolp = 0.0, int maxitp = 0,
                  arcomplex<ARFLOAT>* residp = NULL, bool ishiftp = true);
   // Long constructor (regular mode).
 
-  ARluCompGenEig(int nevp, ARbdNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
+  ARbdCompGenEig(int nevp, ARbdNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
                  ARbdNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& B,
                  arcomplex<ARFLOAT> sigma, char* whichp = "LM",
                  int ncvp = 0, ARFLOAT tolp = 0.0, int maxitp = 0,
                  arcomplex<ARFLOAT>* residp = NULL, bool ishiftp = true);
   // Long constructor (shift and invert mode).
 
-  ARluCompGenEig(const ARluCompGenEig& other) { Copy(other); }
+  ARbdCompGenEig(const ARbdCompGenEig& other) { Copy(other); }
   // Copy constructor.
 
-  virtual ~ARluCompGenEig() { }
+  virtual ~ARbdCompGenEig() { }
 
  // d) Operators.
 
-  ARluCompGenEig& operator=(const ARluCompGenEig& other);
+  ARbdCompGenEig& operator=(const ARbdCompGenEig& other);
   // Assignment operator.
 
-}; // class ARluCompGenEig.
+}; // class ARbdCompGenEig.
 
 
 // ------------------------------------------------------------------------ //
-// ARluCompGenEig member functions definition.                              //
+// ARbdCompGenEig member functions definition.                              //
 // ------------------------------------------------------------------------ //
 
 
 template<class ARFLOAT>
-inline void ARluCompGenEig<ARFLOAT>::
-Copy(const ARluCompGenEig<ARFLOAT>& other)
+inline void ARbdCompGenEig<ARFLOAT>::
+Copy(const ARbdCompGenEig<ARFLOAT>& other)
 {
 
   ARCompGenEig<ARFLOAT, ARbdNonSymPencil<arcomplex<ARFLOAT>, ARFLOAT >,
@@ -110,7 +110,7 @@ Copy(const ARluCompGenEig<ARFLOAT>& othe
 
 
 template<class ARFLOAT>
-inline void ARluCompGenEig<ARFLOAT>::
+inline void ARbdCompGenEig<ARFLOAT>::
 ChangeShift(arcomplex<ARFLOAT> sigmaRp)
 {
 
@@ -121,7 +121,7 @@ ChangeShift(arcomplex<ARFLOAT> sigmaRp)
 
 
 template<class ARFLOAT>
-inline void ARluCompGenEig<ARFLOAT>::SetRegularMode()
+inline void ARbdCompGenEig<ARFLOAT>::SetRegularMode()
 {
 
   ARStdEig<ARFLOAT, arcomplex<ARFLOAT>,
@@ -133,7 +133,7 @@ inline void ARluCompGenEig<ARFLOAT>::Set
 
 
 template<class ARFLOAT>
-inline void ARluCompGenEig<ARFLOAT>::
+inline void ARbdCompGenEig<ARFLOAT>::
 SetShiftInvertMode(arcomplex<ARFLOAT> sigmap)
 {
 
@@ -146,8 +146,8 @@ SetShiftInvertMode(arcomplex<ARFLOAT> si
 
 
 template<class ARFLOAT>
-inline ARluCompGenEig<ARFLOAT>::
-ARluCompGenEig(int nevp, ARbdNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
+inline ARbdCompGenEig<ARFLOAT>::
+ARbdCompGenEig(int nevp, ARbdNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
                ARbdNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& B, char* whichp,
                int ncvp, ARFLOAT tolp, int maxitp,
                arcomplex<ARFLOAT>* residp, bool ishiftp)
@@ -166,8 +166,8 @@ ARluCompGenEig(int nevp, ARbdNonSymMatri
 
 
 template<class ARFLOAT>
-inline ARluCompGenEig<ARFLOAT>::
-ARluCompGenEig(int nevp, ARbdNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
+inline ARbdCompGenEig<ARFLOAT>::
+ARbdCompGenEig(int nevp, ARbdNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
                ARbdNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& B,
                arcomplex<ARFLOAT> sigmap, char* whichp, int ncvp,
                ARFLOAT tolp, int maxitp, arcomplex<ARFLOAT>* residp,
@@ -187,8 +187,8 @@ ARluCompGenEig(int nevp, ARbdNonSymMatri
 
 
 template<class ARFLOAT>
-ARluCompGenEig<ARFLOAT>& ARluCompGenEig<ARFLOAT>::
-operator=(const ARluCompGenEig<ARFLOAT>& other)
+ARbdCompGenEig<ARFLOAT>& ARbdCompGenEig<ARFLOAT>::
+operator=(const ARbdCompGenEig<ARFLOAT>& other)
 {
 
   if (this != &other) { // Stroustrup suggestion.
diff -rupN arpack++.orig/include/arbgnsym.h arpack++.patched/include/arbgnsym.h
--- arpack++.orig/include/arbgnsym.h	2009-10-20 02:59:32.000000000 -0700
+++ arpack++.patched/include/arbgnsym.h	2009-10-22 19:47:41.000000000 -0700
@@ -3,7 +3,7 @@
    c++ interface to ARPACK code.
 
    MODULE ARBGNSym.h.
-   Arpack++ class ARluNonSymGenEig definition
+   Arpack++ class ARbdNonSymGenEig definition
    (band matrix version).
 
    ARPACK Authors
@@ -26,7 +26,7 @@
 
 
 template<class ARFLOAT>
-class ARluNonSymGenEig:
+class ARbdNonSymGenEig:
   public virtual ARNonSymGenEig<ARFLOAT, ARbdNonSymPencil<ARFLOAT, ARFLOAT>,
                                 ARbdNonSymPencil<ARFLOAT, ARFLOAT> > {
 
@@ -38,7 +38,7 @@ class ARluNonSymGenEig:
 
  // b) Protected functions:
 
-  virtual void Copy(const ARluNonSymGenEig& other);
+  virtual void Copy(const ARbdNonSymGenEig& other);
   // Makes a deep copy of "other" over "this" object.
   // Old values are not deleted (this function is to be used
   // by the copy constructor and the assignment operator only).
@@ -60,51 +60,51 @@ class ARluNonSymGenEig:
 
  // c.2) Constructors and destructor.
 
-  ARluNonSymGenEig() { }
+  ARbdNonSymGenEig() { }
   // Short constructor.
 
-  ARluNonSymGenEig(int nevp, ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+  ARbdNonSymGenEig(int nevp, ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                    ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& B, char* whichp = "LM",
                    int ncvp = 0, ARFLOAT tolp = 0.0, int maxitp = 0,
                    ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (regular mode).
 
-  ARluNonSymGenEig(int nevp, ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+  ARbdNonSymGenEig(int nevp, ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                    ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& B, ARFLOAT sigma,
                    char* whichp = "LM", int ncvp = 0,
                    ARFLOAT tolp = 0.0, int maxitp = 0,
                    ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (real shift and invert mode).
 
-  ARluNonSymGenEig(int nevp, ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+  ARbdNonSymGenEig(int nevp, ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                    ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& B, char partp,
                    ARFLOAT sigmaRp, ARFLOAT sigmaIp, char* whichp = "LM",
                    int ncvp = 0, ARFLOAT tolp = 0.0, int maxitp = 0,
                    ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (complex shift and invert mode).
 
-  ARluNonSymGenEig(const ARluNonSymGenEig& other) { Copy(other); }
+  ARbdNonSymGenEig(const ARbdNonSymGenEig& other) { Copy(other); }
   // Copy constructor.
 
-  virtual ~ARluNonSymGenEig() { }
+  virtual ~ARbdNonSymGenEig() { }
   // Destructor.
 
  // d) Operators.
 
-  ARluNonSymGenEig& operator=(const ARluNonSymGenEig& other);
+  ARbdNonSymGenEig& operator=(const ARbdNonSymGenEig& other);
   // Assignment operator.
 
-}; // class ARluNonSymGenEig.
+}; // class ARbdNonSymGenEig.
 
 
 // ------------------------------------------------------------------------ //
-// ARluNonSymGenEig member functions definition.                            //
+// ARbdNonSymGenEig member functions definition.                            //
 // ------------------------------------------------------------------------ //
 
 
 template<class ARFLOAT>
-inline void ARluNonSymGenEig<ARFLOAT>::
-Copy(const ARluNonSymGenEig<ARFLOAT>& other)
+inline void ARbdNonSymGenEig<ARFLOAT>::
+Copy(const ARbdNonSymGenEig<ARFLOAT>& other)
 {
 
   ARNonSymGenEig<ARFLOAT, ARbdNonSymPencil<ARFLOAT, ARFLOAT>,
@@ -118,7 +118,7 @@ Copy(const ARluNonSymGenEig<ARFLOAT>& ot
 
 
 template<class ARFLOAT>
-inline void ARluNonSymGenEig<ARFLOAT>::
+inline void ARbdNonSymGenEig<ARFLOAT>::
 ChangeShift(ARFLOAT sigmaRp, ARFLOAT sigmaIp)
 {
 
@@ -134,7 +134,7 @@ ChangeShift(ARFLOAT sigmaRp, ARFLOAT sig
 
 
 template<class ARFLOAT>
-inline void ARluNonSymGenEig<ARFLOAT>::SetRegularMode()
+inline void ARbdNonSymGenEig<ARFLOAT>::SetRegularMode()
 {
 
   ARStdEig<ARFLOAT, ARFLOAT, ARbdNonSymPencil<ARFLOAT, ARFLOAT> >::
@@ -144,7 +144,7 @@ inline void ARluNonSymGenEig<ARFLOAT>::S
 
 
 template<class ARFLOAT>
-inline void ARluNonSymGenEig<ARFLOAT>::SetShiftInvertMode(ARFLOAT sigmap)
+inline void ARbdNonSymGenEig<ARFLOAT>::SetShiftInvertMode(ARFLOAT sigmap)
 {
 
   ARNonSymGenEig<ARFLOAT, ARbdNonSymPencil<ARFLOAT, ARFLOAT>,
@@ -156,7 +156,7 @@ inline void ARluNonSymGenEig<ARFLOAT>::S
 
 
 template<class ARFLOAT>
-inline void ARluNonSymGenEig<ARFLOAT>::
+inline void ARbdNonSymGenEig<ARFLOAT>::
 SetComplexShiftMode(char partp, ARFLOAT sigmaRp, ARFLOAT sigmaIp)
 {
 
@@ -170,8 +170,8 @@ SetComplexShiftMode(char partp, ARFLOAT 
 
 
 template<class ARFLOAT>
-inline ARluNonSymGenEig<ARFLOAT>::
-ARluNonSymGenEig(int nevp, ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+inline ARbdNonSymGenEig<ARFLOAT>::
+ARbdNonSymGenEig(int nevp, ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                  ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& B, char* whichp, int ncvp,
                  ARFLOAT tolp, int maxitp, ARFLOAT* residp, bool ishiftp)
 
@@ -188,8 +188,8 @@ ARluNonSymGenEig(int nevp, ARbdNonSymMat
 
 
 template<class ARFLOAT>
-inline ARluNonSymGenEig<ARFLOAT>::
-ARluNonSymGenEig(int nevp, ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+inline ARbdNonSymGenEig<ARFLOAT>::
+ARbdNonSymGenEig(int nevp, ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                  ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& B, ARFLOAT sigmap,
                  char* whichp, int ncvp, ARFLOAT tolp,
                  int maxitp, ARFLOAT* residp, bool ishiftp)
@@ -207,8 +207,8 @@ ARluNonSymGenEig(int nevp, ARbdNonSymMat
 
 
 template<class ARFLOAT>
-inline ARluNonSymGenEig<ARFLOAT>::
-ARluNonSymGenEig(int nevp, ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+inline ARbdNonSymGenEig<ARFLOAT>::
+ARbdNonSymGenEig(int nevp, ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                  ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& B, char partp, 
                  ARFLOAT sigmaRp, ARFLOAT sigmaIp, char* whichp, int ncvp, 
                  ARFLOAT tolp, int maxitp, ARFLOAT* residp, bool ishiftp)
@@ -226,8 +226,8 @@ ARluNonSymGenEig(int nevp, ARbdNonSymMat
 
 
 template<class ARFLOAT>
-ARluNonSymGenEig<ARFLOAT>& ARluNonSymGenEig<ARFLOAT>::
-operator=(const ARluNonSymGenEig<ARFLOAT>& other)
+ARbdNonSymGenEig<ARFLOAT>& ARbdNonSymGenEig<ARFLOAT>::
+operator=(const ARbdNonSymGenEig<ARFLOAT>& other)
 {
 
   if (this != &other) { // Stroustrup suggestion.
diff -rupN arpack++.orig/include/arbgsym.h arpack++.patched/include/arbgsym.h
--- arpack++.orig/include/arbgsym.h	2009-10-20 02:59:32.000000000 -0700
+++ arpack++.patched/include/arbgsym.h	2009-10-22 19:47:57.000000000 -0700
@@ -3,7 +3,7 @@
    c++ interface to ARPACK code.
 
    MODULE ARBGSym.h.
-   Arpack++ class ARluSymGenEig definition
+   Arpack++ class ARbdSymGenEig definition
    (band matrix version).
 
    ARPACK Authors
@@ -26,7 +26,7 @@
 
 
 template<class ARFLOAT>
-class ARluSymGenEig:
+class ARbdSymGenEig:
   public virtual ARSymGenEig<ARFLOAT, ARbdSymPencil<ARFLOAT>,
                              ARbdSymPencil<ARFLOAT> > {
 
@@ -38,7 +38,7 @@ class ARluSymGenEig:
 
  // b) Protected functions:
 
-  virtual void Copy(const ARluSymGenEig& other);
+  virtual void Copy(const ARbdSymGenEig& other);
   // Makes a deep copy of "other" over "this" object.
   // Old values are not deleted (this function is to be used
   // by the copy constructor and the assignment operator only).
@@ -62,43 +62,43 @@ class ARluSymGenEig:
 
  // c.2) Constructors and destructor.
 
-  ARluSymGenEig() { }
+  ARbdSymGenEig() { }
   // Short constructor.
 
-  ARluSymGenEig(int nevp, ARbdSymMatrix<ARFLOAT>& A,
+  ARbdSymGenEig(int nevp, ARbdSymMatrix<ARFLOAT>& A,
                 ARbdSymMatrix<ARFLOAT>& B, char* whichp = "LM",
                 int ncvp = 0, ARFLOAT tolp = 0.0, int maxitp = 0,
                 ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (regular mode).
 
-  ARluSymGenEig(char InvertModep, int nevp, ARbdSymMatrix<ARFLOAT>& A,
+  ARbdSymGenEig(char InvertModep, int nevp, ARbdSymMatrix<ARFLOAT>& A,
                 ARbdSymMatrix<ARFLOAT>& B, ARFLOAT sigma, char* whichp = "LM", 
                 int ncvp = 0, ARFLOAT tolp = 0.0, int maxitp = 0,
                 ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (shift and invert, buckling and Cayley modes).
 
-  ARluSymGenEig(const ARluSymGenEig& other) { Copy(other); }
+  ARbdSymGenEig(const ARbdSymGenEig& other) { Copy(other); }
   // Copy constructor.
 
-  virtual ~ARluSymGenEig() { }
+  virtual ~ARbdSymGenEig() { }
   // Destructor.
 
  // d) Operators.
 
-  ARluSymGenEig& operator=(const ARluSymGenEig& other);
+  ARbdSymGenEig& operator=(const ARbdSymGenEig& other);
   // Assignment operator.
 
-}; // class ARluSymGenEig.
+}; // class ARbdSymGenEig.
 
 
 // ------------------------------------------------------------------------ //
-// ARluSymGenEig member functions definition.                               //
+// ARbdSymGenEig member functions definition.                               //
 // ------------------------------------------------------------------------ //
 
 
 template<class ARFLOAT>
-inline void ARluSymGenEig<ARFLOAT>::
-Copy(const ARluSymGenEig<ARFLOAT>& other)
+inline void ARbdSymGenEig<ARFLOAT>::
+Copy(const ARbdSymGenEig<ARFLOAT>& other)
 {
 
   ARSymGenEig<ARFLOAT, ARbdSymPencil<ARFLOAT>,
@@ -112,7 +112,7 @@ Copy(const ARluSymGenEig<ARFLOAT>& other
 
 
 template<class ARFLOAT>
-inline void ARluSymGenEig<ARFLOAT>::ChangeShift(ARFLOAT sigmap)
+inline void ARbdSymGenEig<ARFLOAT>::ChangeShift(ARFLOAT sigmap)
 {
 
   this->objOP->FactorAsB(sigmap);
@@ -122,7 +122,7 @@ inline void ARluSymGenEig<ARFLOAT>::Chan
 
 
 template<class ARFLOAT>
-inline void ARluSymGenEig<ARFLOAT>::SetRegularMode()
+inline void ARbdSymGenEig<ARFLOAT>::SetRegularMode()
 {
 
   ARStdEig<ARFLOAT, ARFLOAT, ARbdSymPencil<ARFLOAT> >::
@@ -132,7 +132,7 @@ inline void ARluSymGenEig<ARFLOAT>::SetR
 
 
 template<class ARFLOAT>
-inline void ARluSymGenEig<ARFLOAT>::
+inline void ARbdSymGenEig<ARFLOAT>::
 SetShiftInvertMode(ARFLOAT sigmap)
 {
 
@@ -144,7 +144,7 @@ SetShiftInvertMode(ARFLOAT sigmap)
 
 
 template<class ARFLOAT>
-inline void ARluSymGenEig<ARFLOAT>::
+inline void ARbdSymGenEig<ARFLOAT>::
 SetBucklingMode(ARFLOAT sigmap)
 {
 
@@ -156,7 +156,7 @@ SetBucklingMode(ARFLOAT sigmap)
 
 
 template<class ARFLOAT>
-inline void ARluSymGenEig<ARFLOAT>::
+inline void ARbdSymGenEig<ARFLOAT>::
 SetCayleyMode(ARFLOAT sigmap)
 {
 
@@ -169,8 +169,8 @@ SetCayleyMode(ARFLOAT sigmap)
 
 
 template<class ARFLOAT>
-inline ARluSymGenEig<ARFLOAT>::
-ARluSymGenEig(int nevp, ARbdSymMatrix<ARFLOAT>& A,
+inline ARbdSymGenEig<ARFLOAT>::
+ARbdSymGenEig(int nevp, ARbdSymMatrix<ARFLOAT>& A,
               ARbdSymMatrix<ARFLOAT>& B, char* whichp, int ncvp,
               ARFLOAT tolp, int maxitp, ARFLOAT* residp, bool ishiftp)
 
@@ -188,8 +188,8 @@ ARluSymGenEig(int nevp, ARbdSymMatrix<AR
 
 
 template<class ARFLOAT>
-inline ARluSymGenEig<ARFLOAT>::
-ARluSymGenEig(char InvertModep, int nevp, ARbdSymMatrix<ARFLOAT>& A,
+inline ARbdSymGenEig<ARFLOAT>::
+ARbdSymGenEig(char InvertModep, int nevp, ARbdSymMatrix<ARFLOAT>& A,
               ARbdSymMatrix<ARFLOAT>& B, ARFLOAT sigmap,
               char* whichp, int ncvp, ARFLOAT tolp,
               int maxitp, ARFLOAT* residp, bool ishiftp)
@@ -216,8 +216,8 @@ ARluSymGenEig(char InvertModep, int nevp
 
 
 template<class ARFLOAT>
-ARluSymGenEig<ARFLOAT>& ARluSymGenEig<ARFLOAT>::
-operator=(const ARluSymGenEig<ARFLOAT>& other)
+ARbdSymGenEig<ARFLOAT>& ARbdSymGenEig<ARFLOAT>::
+operator=(const ARbdSymGenEig<ARFLOAT>& other)
 {
 
   if (this != &other) { // Stroustrup suggestion.
diff -rupN arpack++.orig/include/arbscomp.h arpack++.patched/include/arbscomp.h
--- arpack++.orig/include/arbscomp.h	2009-10-20 02:59:32.000000000 -0700
+++ arpack++.patched/include/arbscomp.h	2009-10-22 19:48:13.000000000 -0700
@@ -3,7 +3,7 @@
    c++ interface to ARPACK code.
 
    MODULE ARBSComp.h.
-   Arpack++ class ARluCompStdEig definition
+   Arpack++ class ARbdCompStdEig definition
    (band matrix version).
 
    ARPACK Authors
@@ -26,7 +26,7 @@
 
 
 template<class ARFLOAT>
-class ARluCompStdEig:
+class ARbdCompStdEig:
   public virtual ARCompStdEig<ARFLOAT,
                               ARbdNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT> > {
 
@@ -44,43 +44,43 @@ class ARluCompStdEig:
 
  // a.2) Constructors and destructor.
 
-  ARluCompStdEig() { }
+  ARbdCompStdEig() { }
   // Short constructor.
 
-  ARluCompStdEig(int nevp, ARbdNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A, 
+  ARbdCompStdEig(int nevp, ARbdNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
                  char* whichp = "LM", int ncvp = 0,
                  ARFLOAT tolp = 0.0, int maxitp = 0,
                  arcomplex<ARFLOAT>* residp = NULL, bool ishiftp = true);
   // Long constructor (regular mode).
 
-  ARluCompStdEig(int nevp, ARbdNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
+  ARbdCompStdEig(int nevp, ARbdNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
                  arcomplex<ARFLOAT> sigma, char* whichp = "LM",
                  int ncvp = 0, ARFLOAT tolp = 0.0, int maxitp = 0,
                  arcomplex<ARFLOAT>* residp = NULL, bool ishiftp = true);
   // Long constructor (shift and invert mode).
 
-  ARluCompStdEig(const ARluCompStdEig& other) { Copy(other); }
+  ARbdCompStdEig(const ARbdCompStdEig& other) { Copy(other); }
   // Copy constructor.
 
-  virtual ~ARluCompStdEig() { }
+  virtual ~ARbdCompStdEig() { }
   // Destructor.
 
 
  // b) Operators.
 
-  ARluCompStdEig& operator=(const ARluCompStdEig& other);
+  ARbdCompStdEig& operator=(const ARbdCompStdEig& other);
   // Assignment operator.
 
-}; // class ARluCompStdEig.
+}; // class ARbdCompStdEig.
 
 
 // ------------------------------------------------------------------------ //
-// ARluCompStdEig member functions definition.                              //
+// ARbdCompStdEig member functions definition.                              //
 // ------------------------------------------------------------------------ //
 
 
 template<class ARFLOAT>
-inline void ARluCompStdEig<ARFLOAT>::
+inline void ARbdCompStdEig<ARFLOAT>::
 ChangeShift(arcomplex<ARFLOAT> sigmaRp)
 {
 
@@ -91,7 +91,7 @@ ChangeShift(arcomplex<ARFLOAT> sigmaRp)
 
 
 template<class ARFLOAT>
-inline void ARluCompStdEig<ARFLOAT>::SetRegularMode()
+inline void ARbdCompStdEig<ARFLOAT>::SetRegularMode()
 {
 
   ARStdEig<ARFLOAT, arcomplex<ARFLOAT>, 
@@ -102,7 +102,7 @@ inline void ARluCompStdEig<ARFLOAT>::Set
 
 
 template<class ARFLOAT>
-inline void ARluCompStdEig<ARFLOAT>::
+inline void ARbdCompStdEig<ARFLOAT>::
 SetShiftInvertMode(arcomplex<ARFLOAT> sigmap)
 {
 
@@ -115,8 +115,8 @@ SetShiftInvertMode(arcomplex<ARFLOAT> si
 
 
 template<class ARFLOAT>
-inline ARluCompStdEig<ARFLOAT>::
-ARluCompStdEig(int nevp, ARbdNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
+inline ARbdCompStdEig<ARFLOAT>::
+ARbdCompStdEig(int nevp, ARbdNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
                char* whichp, int ncvp, ARFLOAT tolp,
                int maxitp, arcomplex<ARFLOAT>* residp, bool ishiftp)
 
@@ -131,8 +131,8 @@ ARluCompStdEig(int nevp, ARbdNonSymMatri
 
 
 template<class ARFLOAT>
-inline ARluCompStdEig<ARFLOAT>::
-ARluCompStdEig(int nevp, ARbdNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
+inline ARbdCompStdEig<ARFLOAT>::
+ARbdCompStdEig(int nevp, ARbdNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
                arcomplex<ARFLOAT> sigmap, char* whichp, int ncvp,
                ARFLOAT tolp, int maxitp, arcomplex<ARFLOAT>* residp,
                bool ishiftp)
@@ -148,8 +148,8 @@ ARluCompStdEig(int nevp, ARbdNonSymMatri
 
 
 template<class ARFLOAT>
-ARluCompStdEig<ARFLOAT>& ARluCompStdEig<ARFLOAT>::
-operator=(const ARluCompStdEig<ARFLOAT>& other)
+ARbdCompStdEig<ARFLOAT>& ARbdCompStdEig<ARFLOAT>::
+operator=(const ARbdCompStdEig<ARFLOAT>& other)
 {
 
   if (this != &other) { // Stroustrup suggestion.
diff -rupN arpack++.orig/include/arbsnsym.h arpack++.patched/include/arbsnsym.h
--- arpack++.orig/include/arbsnsym.h	2009-10-20 02:59:32.000000000 -0700
+++ arpack++.patched/include/arbsnsym.h	2009-10-22 19:48:28.000000000 -0700
@@ -3,7 +3,7 @@
    c++ interface to ARPACK code.
 
    MODULE ARBSNSym.h.
-   Arpack++ class ARluNonSymStdEig definition
+   Arpack++ class ARbdNonSymStdEig definition
    (band matrix version).
 
    ARPACK Authors
@@ -25,7 +25,7 @@
 
 
 template<class ARFLOAT>
-class ARluNonSymStdEig:
+class ARbdNonSymStdEig:
   public virtual ARNonSymStdEig<ARFLOAT, ARbdNonSymMatrix<ARFLOAT, ARFLOAT> > {
 
  public:
@@ -42,42 +42,42 @@ class ARluNonSymStdEig:
 
  // a.2) Constructors and destructor.
 
-  ARluNonSymStdEig() { }
+  ARbdNonSymStdEig() { }
   // Short constructor.
 
-  ARluNonSymStdEig(int nevp, ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+  ARbdNonSymStdEig(int nevp, ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                    char* whichp = "LM", int ncvp = 0,
                    ARFLOAT tolp = 0.0, int maxitp = 0,
                    ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (regular mode).
 
-  ARluNonSymStdEig(int nevp, ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+  ARbdNonSymStdEig(int nevp, ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                    ARFLOAT sigma, char* whichp = "LM", int ncvp = 0,
                    ARFLOAT tolp = 0.0, int maxitp = 0,
                    ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (shift and invert mode).
 
-  ARluNonSymStdEig(const ARluNonSymStdEig& other) { Copy(other); }
+  ARbdNonSymStdEig(const ARbdNonSymStdEig& other) { Copy(other); }
   // Copy constructor.
 
-  virtual ~ARluNonSymStdEig() { }
+  virtual ~ARbdNonSymStdEig() { }
   // Destructor.
 
  // b) Operators.
 
-  ARluNonSymStdEig& operator=(const ARluNonSymStdEig& other);
+  ARbdNonSymStdEig& operator=(const ARbdNonSymStdEig& other);
   // Assignment operator.
 
-}; // class ARluNonSymStdEig.
+}; // class ARbdNonSymStdEig.
 
 
 // ------------------------------------------------------------------------ //
-// ARluNonSymStdEig member functions definition.                            //
+// ARbdNonSymStdEig member functions definition.                            //
 // ------------------------------------------------------------------------ //
 
 
 template<class ARFLOAT>
-inline void ARluNonSymStdEig<ARFLOAT>::
+inline void ARbdNonSymStdEig<ARFLOAT>::
 ChangeShift(ARFLOAT sigmaRp)
 {
 
@@ -93,7 +93,7 @@ ChangeShift(ARFLOAT sigmaRp)
 
 
 template<class ARFLOAT>
-inline void ARluNonSymStdEig<ARFLOAT>::SetRegularMode()
+inline void ARbdNonSymStdEig<ARFLOAT>::SetRegularMode()
 {
 
   ARStdEig<ARFLOAT, ARFLOAT, ARbdNonSymMatrix<ARFLOAT, ARFLOAT> >::
@@ -103,7 +103,7 @@ inline void ARluNonSymStdEig<ARFLOAT>::S
 
 
 template<class ARFLOAT>
-inline void ARluNonSymStdEig<ARFLOAT>::SetShiftInvertMode(ARFLOAT sigmap)
+inline void ARbdNonSymStdEig<ARFLOAT>::SetShiftInvertMode(ARFLOAT sigmap)
 {
 
   ARStdEig<ARFLOAT, ARFLOAT, ARbdNonSymMatrix<ARFLOAT, ARFLOAT> >::
@@ -114,8 +114,8 @@ inline void ARluNonSymStdEig<ARFLOAT>::S
 
 
 template<class ARFLOAT>
-inline ARluNonSymStdEig<ARFLOAT>::
-ARluNonSymStdEig(int nevp, ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+inline ARbdNonSymStdEig<ARFLOAT>::
+ARbdNonSymStdEig(int nevp, ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                  char* whichp, int ncvp, ARFLOAT tolp,
                  int maxitp, ARFLOAT* residp, bool ishiftp)
 
@@ -130,8 +130,8 @@ ARluNonSymStdEig(int nevp, ARbdNonSymMat
 
 
 template<class ARFLOAT>
-inline ARluNonSymStdEig<ARFLOAT>::
-ARluNonSymStdEig(int nevp, ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+inline ARbdNonSymStdEig<ARFLOAT>::
+ARbdNonSymStdEig(int nevp, ARbdNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                  ARFLOAT sigmap, char* whichp, int ncvp, ARFLOAT tolp,
                  int maxitp, ARFLOAT* residp, bool ishiftp)
 
@@ -146,8 +146,8 @@ ARluNonSymStdEig(int nevp, ARbdNonSymMat
 
 
 template<class ARFLOAT>
-ARluNonSymStdEig<ARFLOAT>& ARluNonSymStdEig<ARFLOAT>::
-operator=(const ARluNonSymStdEig<ARFLOAT>& other)
+ARbdNonSymStdEig<ARFLOAT>& ARbdNonSymStdEig<ARFLOAT>::
+operator=(const ARbdNonSymStdEig<ARFLOAT>& other)
 {
 
   if (this != &other) { // Stroustrup suggestion.
diff -rupN arpack++.orig/include/arbssym.h arpack++.patched/include/arbssym.h
--- arpack++.orig/include/arbssym.h	2009-10-20 02:59:32.000000000 -0700
+++ arpack++.patched/include/arbssym.h	2009-10-22 19:48:46.000000000 -0700
@@ -3,7 +3,7 @@
    c++ interface to ARPACK code.
 
    MODULE ARBSSym.h.
-   Arpack++ class ARluSymStdEig definition
+   Arpack++ class ARbdSymStdEig definition
    (band matrix version).
 
    ARPACK Authors
@@ -25,7 +25,7 @@
 
 
 template<class ARFLOAT>
-class ARluSymStdEig:
+class ARbdSymStdEig:
   public virtual ARSymStdEig<ARFLOAT, ARbdSymMatrix<ARFLOAT> > {
 
  public:
@@ -42,42 +42,42 @@ class ARluSymStdEig:
 
  // a.2) Constructors and destructor.
 
-  ARluSymStdEig() { }
+  ARbdSymStdEig() { }
   // Short constructor.
 
-  ARluSymStdEig(int nevp, ARbdSymMatrix<ARFLOAT>& A,
+  ARbdSymStdEig(int nevp, ARbdSymMatrix<ARFLOAT>& A,
                 char* whichp = "LM", int ncvp = 0,
                 ARFLOAT tolp = 0.0, int maxitp = 0,
                 ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (regular mode).
 
-  ARluSymStdEig(int nevp, ARbdSymMatrix<ARFLOAT>& A,
+  ARbdSymStdEig(int nevp, ARbdSymMatrix<ARFLOAT>& A,
                 ARFLOAT sigma, char* whichp = "LM", int ncvp = 0,
                 ARFLOAT tolp = 0.0, int maxitp = 0,
                 ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (shift and invert mode).
 
-  ARluSymStdEig(const ARluSymStdEig& other) { Copy(other); }
+  ARbdSymStdEig(const ARbdSymStdEig& other) { Copy(other); }
   // Copy constructor.
 
-  virtual ~ARluSymStdEig() { }
+  virtual ~ARbdSymStdEig() { }
   // Destructor.
 
  // b) Operators.
 
-  ARluSymStdEig& operator=(const ARluSymStdEig& other);
+  ARbdSymStdEig& operator=(const ARbdSymStdEig& other);
   // Assignment operator.
 
-}; // class ARluSymStdEig.
+}; // class ARbdSymStdEig.
 
 
 // ------------------------------------------------------------------------ //
-// ARluSymStdEig member functions definition.                               //
+// ARbdSymStdEig member functions definition.                               //
 // ------------------------------------------------------------------------ //
 
 
 template<class ARFLOAT>
-inline void ARluSymStdEig<ARFLOAT>::
+inline void ARbdSymStdEig<ARFLOAT>::
 ChangeShift(ARFLOAT sigmaRp)
 {
 
@@ -93,7 +93,7 @@ ChangeShift(ARFLOAT sigmaRp)
 
 
 template<class ARFLOAT>
-inline void ARluSymStdEig<ARFLOAT>::SetRegularMode()
+inline void ARbdSymStdEig<ARFLOAT>::SetRegularMode()
 {
 
   ARStdEig<ARFLOAT, ARFLOAT, ARbdSymMatrix<ARFLOAT> >::
@@ -103,7 +103,7 @@ inline void ARluSymStdEig<ARFLOAT>::SetR
 
 
 template<class ARFLOAT>
-inline void ARluSymStdEig<ARFLOAT>::SetShiftInvertMode(ARFLOAT sigmap)
+inline void ARbdSymStdEig<ARFLOAT>::SetShiftInvertMode(ARFLOAT sigmap)
 {
 
   ARStdEig<ARFLOAT, ARFLOAT, ARbdSymMatrix<ARFLOAT> >::
@@ -113,8 +113,8 @@ inline void ARluSymStdEig<ARFLOAT>::SetS
 
 
 template<class ARFLOAT>
-inline ARluSymStdEig<ARFLOAT>::
-ARluSymStdEig(int nevp, ARbdSymMatrix<ARFLOAT>& A,
+inline ARbdSymStdEig<ARFLOAT>::
+ARbdSymStdEig(int nevp, ARbdSymMatrix<ARFLOAT>& A,
               char* whichp, int ncvp, ARFLOAT tolp,
               int maxitp, ARFLOAT* residp, bool ishiftp)
 {
@@ -127,8 +127,8 @@ ARluSymStdEig(int nevp, ARbdSymMatrix<AR
 
 
 template<class ARFLOAT>
-inline ARluSymStdEig<ARFLOAT>::
-ARluSymStdEig(int nevp, ARbdSymMatrix<ARFLOAT>& A,
+inline ARbdSymStdEig<ARFLOAT>::
+ARbdSymStdEig(int nevp, ARbdSymMatrix<ARFLOAT>& A,
               ARFLOAT sigmap, char* whichp, int ncvp, ARFLOAT tolp,
               int maxitp, ARFLOAT* residp, bool ishiftp)
 
@@ -142,8 +142,8 @@ ARluSymStdEig(int nevp, ARbdSymMatrix<AR
 
 
 template<class ARFLOAT>
-ARluSymStdEig<ARFLOAT>& ARluSymStdEig<ARFLOAT>::
-operator=(const ARluSymStdEig<ARFLOAT>& other)
+ARbdSymStdEig<ARFLOAT>& ARbdSymStdEig<ARFLOAT>::
+operator=(const ARbdSymStdEig<ARFLOAT>& other)
 {
 
   if (this != &other) { // Stroustrup suggestion.
diff -rupN arpack++.orig/include/ardgcomp.h arpack++.patched/include/ardgcomp.h
--- arpack++.orig/include/ardgcomp.h	2009-10-20 02:59:32.000000000 -0700
+++ arpack++.patched/include/ardgcomp.h	2009-10-22 19:49:11.000000000 -0700
@@ -3,7 +3,7 @@
    c++ interface to ARPACK code.
 
    MODULE ARDGComp.h.
-   Arpack++ class ARluCompGenEig definition
+   Arpack++ class ARdsCompGenEig definition
    (dense matrix version).
 
    ARPACK Authors
@@ -28,7 +28,7 @@
 
 
 template<class ARFLOAT>
-class ARluCompGenEig:
+class ARdsCompGenEig:
   public virtual
     ARCompGenEig<ARFLOAT, ARdsNonSymPencil<arcomplex<ARFLOAT>, ARFLOAT >,
                  ARdsNonSymPencil<arcomplex<ARFLOAT>, ARFLOAT > > {
@@ -41,7 +41,7 @@ class ARluCompGenEig:
 
  // b) Protected functions:
 
-  virtual void Copy(const ARluCompGenEig& other);
+  virtual void Copy(const ARdsCompGenEig& other);
   // Makes a deep copy of "other" over "this" object.
   // Old values are not deleted (this function is to be used
   // by the copy constructor and the assignment operator only).
@@ -61,44 +61,44 @@ class ARluCompGenEig:
 
  // c.2) Constructors and destructor.
 
-  ARluCompGenEig() { }
+  ARdsCompGenEig() { }
   // Short constructor.
 
-  ARluCompGenEig(int nevp, ARdsNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
+  ARdsCompGenEig(int nevp, ARdsNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
                  ARdsNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& B,
                  char* whichp = "LM", int ncvp = 0,
                  ARFLOAT tolp = 0.0, int maxitp = 0,
                  arcomplex<ARFLOAT>* residp = NULL, bool ishiftp = true);
   // Long constructor (regular mode).
 
-  ARluCompGenEig(int nevp, ARdsNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
+  ARdsCompGenEig(int nevp, ARdsNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
                  ARdsNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& B,
                  arcomplex<ARFLOAT> sigma, char* whichp = "LM",
                  int ncvp = 0, ARFLOAT tolp = 0.0, int maxitp = 0,
                  arcomplex<ARFLOAT>* residp = NULL, bool ishiftp = true);
   // Long constructor (shift and invert mode).
 
-  ARluCompGenEig(const ARluCompGenEig& other) { Copy(other); }
+  ARdsCompGenEig(const ARdsCompGenEig& other) { Copy(other); }
   // Copy constructor.
 
-  virtual ~ARluCompGenEig() { }
+  virtual ~ARdsCompGenEig() { }
 
  // d) Operators.
 
-  ARluCompGenEig& operator=(const ARluCompGenEig& other);
+  ARdsCompGenEig& operator=(const ARdsCompGenEig& other);
   // Assignment operator.
 
-}; // class ARluCompGenEig.
+}; // class ARdsCompGenEig.
 
 
 // ------------------------------------------------------------------------ //
-// ARluCompGenEig member functions definition.                              //
+// ARdsCompGenEig member functions definition.                              //
 // ------------------------------------------------------------------------ //
 
 
 template<class ARFLOAT>
-inline void ARluCompGenEig<ARFLOAT>::
-Copy(const ARluCompGenEig<ARFLOAT>& other)
+inline void ARdsCompGenEig<ARFLOAT>::
+Copy(const ARdsCompGenEig<ARFLOAT>& other)
 {
 
   ARCompGenEig<ARFLOAT, ARdsNonSymPencil<arcomplex<ARFLOAT>, ARFLOAT >,
@@ -111,7 +111,7 @@ Copy(const ARluCompGenEig<ARFLOAT>& othe
 
 
 template<class ARFLOAT>
-inline void ARluCompGenEig<ARFLOAT>::
+inline void ARdsCompGenEig<ARFLOAT>::
 ChangeShift(arcomplex<ARFLOAT> sigmaRp)
 {
 
@@ -122,7 +122,7 @@ ChangeShift(arcomplex<ARFLOAT> sigmaRp)
 
 
 template<class ARFLOAT>
-inline void ARluCompGenEig<ARFLOAT>::SetRegularMode()
+inline void ARdsCompGenEig<ARFLOAT>::SetRegularMode()
 {
 
   ARStdEig<ARFLOAT, arcomplex<ARFLOAT>,
@@ -134,7 +134,7 @@ inline void ARluCompGenEig<ARFLOAT>::Set
 
 
 template<class ARFLOAT>
-inline void ARluCompGenEig<ARFLOAT>::
+inline void ARdsCompGenEig<ARFLOAT>::
 SetShiftInvertMode(arcomplex<ARFLOAT> sigmap)
 {
 
@@ -147,8 +147,8 @@ SetShiftInvertMode(arcomplex<ARFLOAT> si
 
 
 template<class ARFLOAT>
-inline ARluCompGenEig<ARFLOAT>::
-ARluCompGenEig(int nevp, ARdsNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
+inline ARdsCompGenEig<ARFLOAT>::
+ARdsCompGenEig(int nevp, ARdsNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
                ARdsNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& B, char* whichp,
                int ncvp, ARFLOAT tolp, int maxitp,
                arcomplex<ARFLOAT>* residp, bool ishiftp)
@@ -167,8 +167,8 @@ ARluCompGenEig(int nevp, ARdsNonSymMatri
 
 
 template<class ARFLOAT>
-inline ARluCompGenEig<ARFLOAT>::
-ARluCompGenEig(int nevp, ARdsNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
+inline ARdsCompGenEig<ARFLOAT>::
+ARdsCompGenEig(int nevp, ARdsNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
                ARdsNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& B,
                arcomplex<ARFLOAT> sigmap, char* whichp, int ncvp,
                ARFLOAT tolp, int maxitp, arcomplex<ARFLOAT>* residp,
@@ -188,8 +188,8 @@ ARluCompGenEig(int nevp, ARdsNonSymMatri
 
 
 template<class ARFLOAT>
-ARluCompGenEig<ARFLOAT>& ARluCompGenEig<ARFLOAT>::
-operator=(const ARluCompGenEig<ARFLOAT>& other)
+ARdsCompGenEig<ARFLOAT>& ARdsCompGenEig<ARFLOAT>::
+operator=(const ARdsCompGenEig<ARFLOAT>& other)
 {
 
   if (this != &other) { // Stroustrup suggestion.
diff -rupN arpack++.orig/include/ardgnsym.h arpack++.patched/include/ardgnsym.h
--- arpack++.orig/include/ardgnsym.h	2009-10-20 02:59:32.000000000 -0700
+++ arpack++.patched/include/ardgnsym.h	2009-10-22 19:41:59.000000000 -0700
@@ -3,7 +3,7 @@
    c++ interface to ARPACK code.
 
    MODULE ARDGNSym.h.
-   Arpack++ class ARluNonSymGenEig definition
+   Arpack++ class ARdsNonSymGenEig definition
    (dense matrix version).
 
    ARPACK Authors
@@ -27,7 +27,7 @@
 
 
 template<class ARFLOAT>
-class ARluNonSymGenEig:
+class ARdsNonSymGenEig:
   public virtual ARNonSymGenEig<ARFLOAT, ARdsNonSymPencil<ARFLOAT, ARFLOAT>,
                                 ARdsNonSymPencil<ARFLOAT, ARFLOAT> > {
 
@@ -39,7 +39,7 @@ class ARluNonSymGenEig:
 
  // b) Protected functions:
 
-  virtual void Copy(const ARluNonSymGenEig& other);
+  virtual void Copy(const ARdsNonSymGenEig& other);
   // Makes a deep copy of "other" over "this" object.
   // Old values are not deleted (this function is to be used
   // by the copy constructor and the assignment operator only).
@@ -61,51 +61,51 @@ class ARluNonSymGenEig:
 
  // c.2) Constructors and destructor.
 
-  ARluNonSymGenEig() { }
+  ARdsNonSymGenEig() { }
   // Short constructor.
 
-  ARluNonSymGenEig(int nevp, ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+  ARdsNonSymGenEig(int nevp, ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                    ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& B, char* whichp = "LM",
                    int ncvp = 0, ARFLOAT tolp = 0.0, int maxitp = 0,
                    ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (regular mode).
 
-  ARluNonSymGenEig(int nevp, ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+  ARdsNonSymGenEig(int nevp, ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                    ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& B, ARFLOAT sigma,
                    char* whichp = "LM", int ncvp = 0,
                    ARFLOAT tolp = 0.0, int maxitp = 0,
                    ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (real shift and invert mode).
 
-  ARluNonSymGenEig(int nevp, ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+  ARdsNonSymGenEig(int nevp, ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                    ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& B, char partp,
                    ARFLOAT sigmaRp, ARFLOAT sigmaIp, char* whichp = "LM",
                    int ncvp = 0, ARFLOAT tolp = 0.0, int maxitp = 0,
                    ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (complex shift and invert mode).
 
-  ARluNonSymGenEig(const ARluNonSymGenEig& other) { Copy(other); }
+  ARdsNonSymGenEig(const ARdsNonSymGenEig& other) { Copy(other); }
   // Copy constructor.
 
-  virtual ~ARluNonSymGenEig() { }
+  virtual ~ARdsNonSymGenEig() { }
   // Destructor.
 
  // d) Operators.
 
-  ARluNonSymGenEig& operator=(const ARluNonSymGenEig& other);
+  ARdsNonSymGenEig& operator=(const ARdsNonSymGenEig& other);
   // Assignment operator.
 
-}; // class ARluNonSymGenEig.
+}; // class ARdsNonSymGenEig.
 
 
 // ------------------------------------------------------------------------ //
-// ARluNonSymGenEig member functions definition.                            //
+// ARdsNonSymGenEig member functions definition.                            //
 // ------------------------------------------------------------------------ //
 
 
 template<class ARFLOAT>
-inline void ARluNonSymGenEig<ARFLOAT>::
-Copy(const ARluNonSymGenEig<ARFLOAT>& other)
+inline void ARdsNonSymGenEig<ARFLOAT>::
+Copy(const ARdsNonSymGenEig<ARFLOAT>& other)
 {
 
   ARNonSymGenEig<ARFLOAT, ARdsNonSymPencil<ARFLOAT, ARFLOAT>,
@@ -119,7 +119,7 @@ Copy(const ARluNonSymGenEig<ARFLOAT>& ot
 
 
 template<class ARFLOAT>
-inline void ARluNonSymGenEig<ARFLOAT>::
+inline void ARdsNonSymGenEig<ARFLOAT>::
 ChangeShift(ARFLOAT sigmaRp, ARFLOAT sigmaIp)
 {
 
@@ -135,7 +135,7 @@ ChangeShift(ARFLOAT sigmaRp, ARFLOAT sig
 
 
 template<class ARFLOAT>
-inline void ARluNonSymGenEig<ARFLOAT>::SetRegularMode()
+inline void ARdsNonSymGenEig<ARFLOAT>::SetRegularMode()
 {
 
   ARStdEig<ARFLOAT, ARFLOAT, ARdsNonSymPencil<ARFLOAT, ARFLOAT> >::
@@ -145,7 +145,7 @@ inline void ARluNonSymGenEig<ARFLOAT>::S
 
 
 template<class ARFLOAT>
-inline void ARluNonSymGenEig<ARFLOAT>::SetShiftInvertMode(ARFLOAT sigmap)
+inline void ARdsNonSymGenEig<ARFLOAT>::SetShiftInvertMode(ARFLOAT sigmap)
 {
 
   ARNonSymGenEig<ARFLOAT, ARdsNonSymPencil<ARFLOAT, ARFLOAT>,
@@ -157,7 +157,7 @@ inline void ARluNonSymGenEig<ARFLOAT>::S
 
 
 template<class ARFLOAT>
-inline void ARluNonSymGenEig<ARFLOAT>::
+inline void ARdsNonSymGenEig<ARFLOAT>::
 SetComplexShiftMode(char partp, ARFLOAT sigmaRp, ARFLOAT sigmaIp)
 {
 
@@ -171,8 +171,8 @@ SetComplexShiftMode(char partp, ARFLOAT 
 
 
 template<class ARFLOAT>
-inline ARluNonSymGenEig<ARFLOAT>::
-ARluNonSymGenEig(int nevp, ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+inline ARdsNonSymGenEig<ARFLOAT>::
+ARdsNonSymGenEig(int nevp, ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                  ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& B, char* whichp, int ncvp,
                  ARFLOAT tolp, int maxitp, ARFLOAT* residp, bool ishiftp)
 
@@ -189,8 +189,8 @@ ARluNonSymGenEig(int nevp, ARdsNonSymMat
 
 
 template<class ARFLOAT>
-inline ARluNonSymGenEig<ARFLOAT>::
-ARluNonSymGenEig(int nevp, ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+inline ARdsNonSymGenEig<ARFLOAT>::
+ARdsNonSymGenEig(int nevp, ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                  ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& B, ARFLOAT sigmap,
                  char* whichp, int ncvp, ARFLOAT tolp,
                  int maxitp, ARFLOAT* residp, bool ishiftp)
@@ -208,8 +208,8 @@ ARluNonSymGenEig(int nevp, ARdsNonSymMat
 
 
 template<class ARFLOAT>
-inline ARluNonSymGenEig<ARFLOAT>::
-ARluNonSymGenEig(int nevp, ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+inline ARdsNonSymGenEig<ARFLOAT>::
+ARdsNonSymGenEig(int nevp, ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                  ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& B, 
                  char partp, ARFLOAT sigmaRp, ARFLOAT sigmaIp, char* whichp, 
                  int ncvp, ARFLOAT tolp, int maxitp, ARFLOAT* residp, 
@@ -228,8 +228,8 @@ ARluNonSymGenEig(int nevp, ARdsNonSymMat
 
 
 template<class ARFLOAT>
-ARluNonSymGenEig<ARFLOAT>& ARluNonSymGenEig<ARFLOAT>::
-operator=(const ARluNonSymGenEig<ARFLOAT>& other)
+ARdsNonSymGenEig<ARFLOAT>& ARdsNonSymGenEig<ARFLOAT>::
+operator=(const ARdsNonSymGenEig<ARFLOAT>& other)
 {
 
   if (this != &other) { // Stroustrup suggestion.
diff -rupN arpack++.orig/include/ardgsym.h arpack++.patched/include/ardgsym.h
--- arpack++.orig/include/ardgsym.h	2009-10-20 02:59:32.000000000 -0700
+++ arpack++.patched/include/ardgsym.h	2009-10-22 19:42:30.000000000 -0700
@@ -3,7 +3,7 @@
    c++ interface to ARPACK code.
 
    MODULE ARDGSym.h.
-   Arpack++ class ARluSymGenEig definition
+   Arpack++ class ARdsSymGenEig definition
    (dense matrix version).
 
    ARPACK Authors
@@ -27,7 +27,7 @@
 
 
 template<class ARFLOAT>
-class ARluSymGenEig:
+class ARdsSymGenEig:
   public virtual ARSymGenEig<ARFLOAT, ARdsSymPencil<ARFLOAT>,
                              ARdsSymPencil<ARFLOAT> > {
 
@@ -39,7 +39,7 @@ class ARluSymGenEig:
 
  // b) Protected functions:
 
-  virtual void Copy(const ARluSymGenEig& other);
+  virtual void Copy(const ARdsSymGenEig& other);
   // Makes a deep copy of "other" over "this" object.
   // Old values are not deleted (this function is to be used
   // by the copy constructor and the assignment operator only).
@@ -63,43 +63,43 @@ class ARluSymGenEig:
 
  // c.2) Constructors and destructor.
 
-  ARluSymGenEig() { }
+  ARdsSymGenEig() { }
   // Short constructor.
 
-  ARluSymGenEig(int nevp, ARdsSymMatrix<ARFLOAT>& A,
+  ARdsSymGenEig(int nevp, ARdsSymMatrix<ARFLOAT>& A,
                 ARdsSymMatrix<ARFLOAT>& B, char* whichp = "LM",
                 int ncvp = 0, ARFLOAT tolp = 0.0, int maxitp = 0,
                 ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (regular mode).
 
-  ARluSymGenEig(char InvertModep, int nevp, ARdsSymMatrix<ARFLOAT>& A,
+  ARdsSymGenEig(char InvertModep, int nevp, ARdsSymMatrix<ARFLOAT>& A,
                 ARdsSymMatrix<ARFLOAT>& B, ARFLOAT sigma, char* whichp = "LM", 
                 int ncvp = 0, ARFLOAT tolp = 0.0, int maxitp = 0,
                 ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (shift and invert, buckling and Cayley modes).
 
-  ARluSymGenEig(const ARluSymGenEig& other) { Copy(other); }
+  ARdsSymGenEig(const ARdsSymGenEig& other) { Copy(other); }
   // Copy constructor.
 
-  virtual ~ARluSymGenEig() { }
+  virtual ~ARdsSymGenEig() { }
   // Destructor.
 
  // d) Operators.
 
-  ARluSymGenEig& operator=(const ARluSymGenEig& other);
+  ARdsSymGenEig& operator=(const ARdsSymGenEig& other);
   // Assignment operator.
 
-}; // class ARluSymGenEig.
+}; // class ARdsSymGenEig.
 
 
 // ------------------------------------------------------------------------ //
-// ARluSymGenEig member functions definition.                               //
+// ARdsSymGenEig member functions definition.                               //
 // ------------------------------------------------------------------------ //
 
 
 template<class ARFLOAT>
-inline void ARluSymGenEig<ARFLOAT>::
-Copy(const ARluSymGenEig<ARFLOAT>& other)
+inline void ARdsSymGenEig<ARFLOAT>::
+Copy(const ARdsSymGenEig<ARFLOAT>& other)
 {
 
   ARSymGenEig<ARFLOAT, ARdsSymPencil<ARFLOAT>,
@@ -113,7 +113,7 @@ Copy(const ARluSymGenEig<ARFLOAT>& other
 
 
 template<class ARFLOAT>
-inline void ARluSymGenEig<ARFLOAT>::ChangeShift(ARFLOAT sigmap)
+inline void ARdsSymGenEig<ARFLOAT>::ChangeShift(ARFLOAT sigmap)
 {
 
   this->objOP->FactorAsB(sigmap);
@@ -123,7 +123,7 @@ inline void ARluSymGenEig<ARFLOAT>::Chan
 
 
 template<class ARFLOAT>
-inline void ARluSymGenEig<ARFLOAT>::SetRegularMode()
+inline void ARdsSymGenEig<ARFLOAT>::SetRegularMode()
 {
 
   ARStdEig<ARFLOAT, ARFLOAT, ARdsSymPencil<ARFLOAT> >::
@@ -133,7 +133,7 @@ inline void ARluSymGenEig<ARFLOAT>::SetR
 
 
 template<class ARFLOAT>
-inline void ARluSymGenEig<ARFLOAT>::
+inline void ARdsSymGenEig<ARFLOAT>::
 SetShiftInvertMode(ARFLOAT sigmap)
 {
 
@@ -145,7 +145,7 @@ SetShiftInvertMode(ARFLOAT sigmap)
 
 
 template<class ARFLOAT>
-inline void ARluSymGenEig<ARFLOAT>::
+inline void ARdsSymGenEig<ARFLOAT>::
 SetBucklingMode(ARFLOAT sigmap)
 {
 
@@ -157,7 +157,7 @@ SetBucklingMode(ARFLOAT sigmap)
 
 
 template<class ARFLOAT>
-inline void ARluSymGenEig<ARFLOAT>::
+inline void ARdsSymGenEig<ARFLOAT>::
 SetCayleyMode(ARFLOAT sigmap)
 {
 
@@ -170,8 +170,8 @@ SetCayleyMode(ARFLOAT sigmap)
 
 
 template<class ARFLOAT>
-inline ARluSymGenEig<ARFLOAT>::
-ARluSymGenEig(int nevp, ARdsSymMatrix<ARFLOAT>& A,
+inline ARdsSymGenEig<ARFLOAT>::
+ARdsSymGenEig(int nevp, ARdsSymMatrix<ARFLOAT>& A,
               ARdsSymMatrix<ARFLOAT>& B, char* whichp, int ncvp,
               ARFLOAT tolp, int maxitp, ARFLOAT* residp, bool ishiftp)
 
@@ -189,8 +189,8 @@ ARluSymGenEig(int nevp, ARdsSymMatrix<AR
 
 
 template<class ARFLOAT>
-inline ARluSymGenEig<ARFLOAT>::
-ARluSymGenEig(char InvertModep, int nevp, ARdsSymMatrix<ARFLOAT>& A,
+inline ARdsSymGenEig<ARFLOAT>::
+ARdsSymGenEig(char InvertModep, int nevp, ARdsSymMatrix<ARFLOAT>& A,
               ARdsSymMatrix<ARFLOAT>& B, ARFLOAT sigmap,
               char* whichp, int ncvp, ARFLOAT tolp,
               int maxitp, ARFLOAT* residp, bool ishiftp)
@@ -217,8 +217,8 @@ ARluSymGenEig(char InvertModep, int nevp
 
 
 template<class ARFLOAT>
-ARluSymGenEig<ARFLOAT>& ARluSymGenEig<ARFLOAT>::
-operator=(const ARluSymGenEig<ARFLOAT>& other)
+ARdsSymGenEig<ARFLOAT>& ARdsSymGenEig<ARFLOAT>::
+operator=(const ARdsSymGenEig<ARFLOAT>& other)
 {
 
   if (this != &other) { // Stroustrup suggestion.
diff -rupN arpack++.orig/include/ardscomp.h arpack++.patched/include/ardscomp.h
--- arpack++.orig/include/ardscomp.h	2009-10-20 02:59:32.000000000 -0700
+++ arpack++.patched/include/ardscomp.h	2009-10-22 19:44:19.000000000 -0700
@@ -3,7 +3,7 @@
    c++ interface to ARPACK code.
 
    MODULE ARDSComp.h.
-   Arpack++ class ARluCompStdEig definition
+   Arpack++ class ARdsCompStdEig definition
    (dense matrix version).
 
    ARPACK Authors
@@ -27,7 +27,7 @@
 
 
 template<class ARFLOAT>
-class ARluCompStdEig:
+class ARdsCompStdEig:
   public virtual ARCompStdEig<ARFLOAT, 
                               ARdsNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT> > {
 
@@ -45,43 +45,43 @@ class ARluCompStdEig:
 
  // a.2) Constructors and destructor.
 
-  ARluCompStdEig() { }
+  ARdsCompStdEig() { }
   // Short constructor.
 
-  ARluCompStdEig(int nevp, ARdsNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A, 
+  ARdsCompStdEig(int nevp, ARdsNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A, 
                  char* whichp = "LM", int ncvp = 0,
                  ARFLOAT tolp = 0.0, int maxitp = 0,
                  arcomplex<ARFLOAT>* residp = NULL, bool ishiftp = true);
   // Long constructor (regular mode).
 
-  ARluCompStdEig(int nevp, ARdsNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
+  ARdsCompStdEig(int nevp, ARdsNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
                  arcomplex<ARFLOAT> sigma, char* whichp = "LM",
                  int ncvp = 0, ARFLOAT tolp = 0.0, int maxitp = 0,
                  arcomplex<ARFLOAT>* residp = NULL, bool ishiftp = true);
   // Long constructor (shift and invert mode).
 
-  ARluCompStdEig(const ARluCompStdEig& other) { Copy(other); }
+  ARdsCompStdEig(const ARdsCompStdEig& other) { Copy(other); }
   // Copy constructor.
 
-  virtual ~ARluCompStdEig() { }
+  virtual ~ARdsCompStdEig() { }
   // Destructor.
 
 
  // b) Operators.
 
-  ARluCompStdEig& operator=(const ARluCompStdEig& other);
+  ARdsCompStdEig& operator=(const ARdsCompStdEig& other);
   // Assignment operator.
 
-}; // class ARluCompStdEig.
+}; // class ARdsCompStdEig.
 
 
 // ------------------------------------------------------------------------ //
-// ARluCompStdEig member functions definition.                              //
+// ARdsCompStdEig member functions definition.                              //
 // ------------------------------------------------------------------------ //
 
 
 template<class ARFLOAT>
-inline void ARluCompStdEig<ARFLOAT>::
+inline void ARdsCompStdEig<ARFLOAT>::
 ChangeShift(arcomplex<ARFLOAT> sigmaRp)
 {
 
@@ -92,7 +92,7 @@ ChangeShift(arcomplex<ARFLOAT> sigmaRp)
 
 
 template<class ARFLOAT>
-inline void ARluCompStdEig<ARFLOAT>::SetRegularMode()
+inline void ARdsCompStdEig<ARFLOAT>::SetRegularMode()
 {
 
   ARStdEig<ARFLOAT, arcomplex<ARFLOAT>, 
@@ -104,7 +104,7 @@ inline void ARluCompStdEig<ARFLOAT>::Set
 
 
 template<class ARFLOAT>
-inline void ARluCompStdEig<ARFLOAT>::
+inline void ARdsCompStdEig<ARFLOAT>::
 SetShiftInvertMode(arcomplex<ARFLOAT> sigmap)
 {
 
@@ -117,8 +117,8 @@ SetShiftInvertMode(arcomplex<ARFLOAT> si
 
 
 template<class ARFLOAT>
-inline ARluCompStdEig<ARFLOAT>::
-ARluCompStdEig(int nevp, ARdsNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
+inline ARdsCompStdEig<ARFLOAT>::
+ARdsCompStdEig(int nevp, ARdsNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
                char* whichp, int ncvp, ARFLOAT tolp,
                int maxitp, arcomplex<ARFLOAT>* residp, bool ishiftp)
 
@@ -133,8 +133,8 @@ ARluCompStdEig(int nevp, ARdsNonSymMatri
 
 
 template<class ARFLOAT>
-inline ARluCompStdEig<ARFLOAT>::
-ARluCompStdEig(int nevp, ARdsNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
+inline ARdsCompStdEig<ARFLOAT>::
+ARdsCompStdEig(int nevp, ARdsNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
                arcomplex<ARFLOAT> sigmap, char* whichp, int ncvp,
                ARFLOAT tolp, int maxitp, arcomplex<ARFLOAT>* residp,
                bool ishiftp)
@@ -150,8 +150,8 @@ ARluCompStdEig(int nevp, ARdsNonSymMatri
 
 
 template<class ARFLOAT>
-ARluCompStdEig<ARFLOAT>& ARluCompStdEig<ARFLOAT>::
-operator=(const ARluCompStdEig<ARFLOAT>& other)
+ARdsCompStdEig<ARFLOAT>& ARdsCompStdEig<ARFLOAT>::
+operator=(const ARdsCompStdEig<ARFLOAT>& other)
 {
 
   if (this != &other) { // Stroustrup suggestion.
diff -rupN arpack++.orig/include/ardsnsym.h arpack++.patched/include/ardsnsym.h
--- arpack++.orig/include/ardsnsym.h	2009-10-20 02:59:32.000000000 -0700
+++ arpack++.patched/include/ardsnsym.h	2009-10-22 19:39:42.000000000 -0700
@@ -3,7 +3,7 @@
    c++ interface to ARPACK code.
 
    MODULE ARDSNSym.h.
-   Arpack++ class ARluNonSymStdEig definition
+   Arpack++ class ARdsNonSymStdEig definition
    (dense matrix version).
 
    ARPACK Authors
@@ -26,7 +26,7 @@
 
 
 template<class ARFLOAT>
-class ARluNonSymStdEig:
+class ARdsNonSymStdEig:
   public virtual ARNonSymStdEig<ARFLOAT, ARdsNonSymMatrix<ARFLOAT, ARFLOAT> > {
 
  public:
@@ -43,42 +43,42 @@ class ARluNonSymStdEig:
 
  // a.2) Constructors and destructor.
 
-  ARluNonSymStdEig() { }
+  ARdsNonSymStdEig() { }
   // Short constructor.
 
-  ARluNonSymStdEig(int nevp, ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+  ARdsNonSymStdEig(int nevp, ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                    char* whichp = "LM", int ncvp = 0,
                    ARFLOAT tolp = 0.0, int maxitp = 0,
                    ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (regular mode).
 
-  ARluNonSymStdEig(int nevp, ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+  ARdsNonSymStdEig(int nevp, ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                    ARFLOAT sigma, char* whichp = "LM", int ncvp = 0,
                    ARFLOAT tolp = 0.0, int maxitp = 0,
                    ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (shift and invert mode).
 
-  ARluNonSymStdEig(const ARluNonSymStdEig& other) { Copy(other); }
+  ARdsNonSymStdEig(const ARdsNonSymStdEig& other) { Copy(other); }
   // Copy constructor.
 
-  virtual ~ARluNonSymStdEig() { }
+  virtual ~ARdsNonSymStdEig() { }
   // Destructor.
 
  // b) Operators.
 
-  ARluNonSymStdEig& operator=(const ARluNonSymStdEig& other);
+  ARdsNonSymStdEig& operator=(const ARdsNonSymStdEig& other);
   // Assignment operator.
 
-}; // class ARluNonSymStdEig.
+}; // class ARdsNonSymStdEig.
 
 
 // ------------------------------------------------------------------------ //
-// ARluNonSymStdEig member functions definition.                            //
+// ARdsNonSymStdEig member functions definition.                            //
 // ------------------------------------------------------------------------ //
 
 
 template<class ARFLOAT>
-inline void ARluNonSymStdEig<ARFLOAT>::
+inline void ARdsNonSymStdEig<ARFLOAT>::
 ChangeShift(ARFLOAT sigmaRp)
 {
 
@@ -94,7 +94,7 @@ ChangeShift(ARFLOAT sigmaRp)
 
 
 template<class ARFLOAT>
-inline void ARluNonSymStdEig<ARFLOAT>::SetRegularMode()
+inline void ARdsNonSymStdEig<ARFLOAT>::SetRegularMode()
 {
 
   ARStdEig<ARFLOAT, ARFLOAT, ARdsNonSymMatrix<ARFLOAT, ARFLOAT> >::
@@ -104,7 +104,7 @@ inline void ARluNonSymStdEig<ARFLOAT>::S
 
 
 template<class ARFLOAT>
-inline void ARluNonSymStdEig<ARFLOAT>::SetShiftInvertMode(ARFLOAT sigmap)
+inline void ARdsNonSymStdEig<ARFLOAT>::SetShiftInvertMode(ARFLOAT sigmap)
 {
 
   ARStdEig<ARFLOAT, ARFLOAT, ARdsNonSymMatrix<ARFLOAT, ARFLOAT> >::
@@ -115,8 +115,8 @@ inline void ARluNonSymStdEig<ARFLOAT>::S
 
 
 template<class ARFLOAT>
-inline ARluNonSymStdEig<ARFLOAT>::
-ARluNonSymStdEig(int nevp, ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+inline ARdsNonSymStdEig<ARFLOAT>::
+ARdsNonSymStdEig(int nevp, ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                  char* whichp, int ncvp, ARFLOAT tolp,
                  int maxitp, ARFLOAT* residp, bool ishiftp)
 
@@ -131,8 +131,8 @@ ARluNonSymStdEig(int nevp, ARdsNonSymMat
 
 
 template<class ARFLOAT>
-inline ARluNonSymStdEig<ARFLOAT>::
-ARluNonSymStdEig(int nevp, ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+inline ARdsNonSymStdEig<ARFLOAT>::
+ARdsNonSymStdEig(int nevp, ARdsNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                  ARFLOAT sigmap, char* whichp, int ncvp, ARFLOAT tolp,
                  int maxitp, ARFLOAT* residp, bool ishiftp)
 
@@ -147,8 +147,8 @@ ARluNonSymStdEig(int nevp, ARdsNonSymMat
 
 
 template<class ARFLOAT>
-ARluNonSymStdEig<ARFLOAT>& ARluNonSymStdEig<ARFLOAT>::
-operator=(const ARluNonSymStdEig<ARFLOAT>& other)
+ARdsNonSymStdEig<ARFLOAT>& ARdsNonSymStdEig<ARFLOAT>::
+operator=(const ARdsNonSymStdEig<ARFLOAT>& other)
 {
 
   if (this != &other) { // Stroustrup suggestion.
diff -rupN arpack++.orig/include/ardssym.h arpack++.patched/include/ardssym.h
--- arpack++.orig/include/ardssym.h	2009-10-20 02:59:32.000000000 -0700
+++ arpack++.patched/include/ardssym.h	2009-10-22 19:40:55.000000000 -0700
@@ -3,7 +3,7 @@
    c++ interface to ARPACK code.
 
    MODULE ARDSSym.h.
-   Arpack++ class ARluSymStdEig definition
+   Arpack++ class ARdsSymStdEig definition
    (dense matrix version).
 
    ARPACK Authors
@@ -26,7 +26,7 @@
 
 
 template<class ARFLOAT>
-class ARluSymStdEig:
+class ARdsSymStdEig:
   public virtual ARSymStdEig<ARFLOAT, ARdsSymMatrix<ARFLOAT> > {
 
  public:
@@ -43,42 +43,42 @@ class ARluSymStdEig:
 
  // a.2) Constructors and destructor.
 
-  ARluSymStdEig() { }
+  ARdsSymStdEig() { }
   // Short constructor.
 
-  ARluSymStdEig(int nevp, ARdsSymMatrix<ARFLOAT>& A,
+  ARdsSymStdEig(int nevp, ARdsSymMatrix<ARFLOAT>& A,
                 char* whichp = "LM", int ncvp = 0,
                 ARFLOAT tolp = 0.0, int maxitp = 0,
                 ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (regular mode).
 
-  ARluSymStdEig(int nevp, ARdsSymMatrix<ARFLOAT>& A,
+  ARdsSymStdEig(int nevp, ARdsSymMatrix<ARFLOAT>& A,
                 ARFLOAT sigma, char* whichp = "LM", int ncvp = 0,
                 ARFLOAT tolp = 0.0, int maxitp = 0,
                 ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (shift and invert mode).
 
-  ARluSymStdEig(const ARluSymStdEig& other) { Copy(other); }
+  ARdsSymStdEig(const ARdsSymStdEig& other) { Copy(other); }
   // Copy constructor.
 
-  virtual ~ARluSymStdEig() { }
+  virtual ~ARdsSymStdEig() { }
   // Destructor.
 
  // b) Operators.
 
-  ARluSymStdEig& operator=(const ARluSymStdEig& other);
+  ARdsSymStdEig& operator=(const ARdsSymStdEig& other);
   // Assignment operator.
 
-}; // class ARluSymStdEig.
+}; // class ARdsSymStdEig.
 
 
 // ------------------------------------------------------------------------ //
-// ARluSymStdEig member functions definition.                               //
+// ARdsSymStdEig member functions definition.                               //
 // ------------------------------------------------------------------------ //
 
 
 template<class ARFLOAT>
-inline void ARluSymStdEig<ARFLOAT>::
+inline void ARdsSymStdEig<ARFLOAT>::
 ChangeShift(ARFLOAT sigmaRp)
 {
 
@@ -94,7 +94,7 @@ ChangeShift(ARFLOAT sigmaRp)
 
 
 template<class ARFLOAT>
-inline void ARluSymStdEig<ARFLOAT>::SetRegularMode()
+inline void ARdsSymStdEig<ARFLOAT>::SetRegularMode()
 {
 
   ARStdEig<ARFLOAT, ARFLOAT, ARdsSymMatrix<ARFLOAT> >::
@@ -104,7 +104,7 @@ inline void ARluSymStdEig<ARFLOAT>::SetR
 
 
 template<class ARFLOAT>
-inline void ARluSymStdEig<ARFLOAT>::SetShiftInvertMode(ARFLOAT sigmap)
+inline void ARdsSymStdEig<ARFLOAT>::SetShiftInvertMode(ARFLOAT sigmap)
 {
 
   ARStdEig<ARFLOAT, ARFLOAT, ARdsSymMatrix<ARFLOAT> >::
@@ -114,8 +114,8 @@ inline void ARluSymStdEig<ARFLOAT>::SetS
 
 
 template<class ARFLOAT>
-inline ARluSymStdEig<ARFLOAT>::
-ARluSymStdEig(int nevp, ARdsSymMatrix<ARFLOAT>& A,
+inline ARdsSymStdEig<ARFLOAT>::
+ARdsSymStdEig(int nevp, ARdsSymMatrix<ARFLOAT>& A,
               char* whichp, int ncvp, ARFLOAT tolp,
               int maxitp, ARFLOAT* residp, bool ishiftp)
 {
@@ -128,8 +128,8 @@ ARluSymStdEig(int nevp, ARdsSymMatrix<AR
 
 
 template<class ARFLOAT>
-inline ARluSymStdEig<ARFLOAT>::
-ARluSymStdEig(int nevp, ARdsSymMatrix<ARFLOAT>& A,
+inline ARdsSymStdEig<ARFLOAT>::
+ARdsSymStdEig(int nevp, ARdsSymMatrix<ARFLOAT>& A,
               ARFLOAT sigmap, char* whichp, int ncvp, ARFLOAT tolp,
               int maxitp, ARFLOAT* residp, bool ishiftp)
 
@@ -143,8 +143,8 @@ ARluSymStdEig(int nevp, ARdsSymMatrix<AR
 
 
 template<class ARFLOAT>
-ARluSymStdEig<ARFLOAT>& ARluSymStdEig<ARFLOAT>::
-operator=(const ARluSymStdEig<ARFLOAT>& other)
+ARdsSymStdEig<ARFLOAT>& ARdsSymStdEig<ARFLOAT>::
+operator=(const ARdsSymStdEig<ARFLOAT>& other)
 {
 
   if (this != &other) { // Stroustrup suggestion.
diff -rupN arpack++.orig/include/arerror.h arpack++.patched/include/arerror.h
--- arpack++.orig/include/arerror.h	2009-10-20 02:59:32.000000000 -0700
+++ arpack++.patched/include/arerror.h	2009-10-20 03:02:28.000000000 -0700
@@ -125,7 +125,11 @@ class ArpackError {
 
  private:
 
-  static ErrorCode code;
+  static ErrorCode & code()
+  {
+    static ErrorCode c;
+    return c;
+  }
 
   static void Print(const char* where, const char* message);
   // Writes error messages on cerr stream.
@@ -135,7 +139,7 @@ class ArpackError {
   static void Set(ErrorCode error, char* where="AREigenProblem");
   // Set error code and write error messages.
 
-  static int Status() { return (int) code; }
+  static int Status() { return (int) code(); }
   // Returns current value of error code.
 
   ArpackError(ErrorCode error, char* where="AREigenProblem") {
@@ -143,7 +147,7 @@ class ArpackError {
   }
   // Constructor that set error code.
 
-  ArpackError() { code = NO_ERRORS; };
+  ArpackError() { code() = NO_ERRORS; };
   // Constructor that does nothing.
 
 };
@@ -158,11 +162,11 @@ inline void ArpackError::Print(const cha
 
 } // Print
 
-void ArpackError::Set(ErrorCode error, char* where)
+inline void ArpackError::Set(ErrorCode error, char* where)
 {
 
-  code = error;
-  switch (code) {
+  code() = error;
+  switch (code()) {
   case NO_ERRORS          :
     return;
   case NOT_IMPLEMENTED    :
@@ -329,7 +333,4 @@ void ArpackError::Set(ErrorCode error, c
 
 } // Set.
 
-ArpackError::ErrorCode ArpackError::code = NO_ERRORS;
-// "code" initialization.
-
 #endif // ARERROR_H
diff -rupN arpack++.orig/include/arpackf.h arpack++.patched/include/arpackf.h
--- arpack++.orig/include/arpackf.h	2009-10-20 02:59:32.000000000 -0700
+++ arpack++.patched/include/arpackf.h	2009-10-20 03:02:28.000000000 -0700
@@ -24,7 +24,7 @@ extern "C"
 
 // debug "common" statement.
 
-  struct { 
+  extern struct { 
     ARint logfil, ndigit, mgetv0;
     ARint msaupd, msaup2, msaitr, mseigt, msapps, msgets, mseupd;
     ARint mnaupd, mnaup2, mnaitr, mneigt, mnapps, mngets, mneupd;
diff -rupN arpack++.orig/include/arrseig.h arpack++.patched/include/arrseig.h
--- arpack++.orig/include/arrseig.h	2009-10-20 02:59:32.000000000 -0700
+++ arpack++.patched/include/arrseig.h	2009-10-20 03:02:28.000000000 -0700
@@ -30,7 +30,7 @@
 
 // "New" handler.
 
-void MemoryOverflow() { throw ArpackError(ArpackError::MEMORY_OVERFLOW); }
+inline void MemoryOverflow() { throw ArpackError(ArpackError::MEMORY_OVERFLOW); }
 
 // ARrcStdEig class definition.
 
diff -rupN arpack++.orig/include/arugcomp.h arpack++.patched/include/arugcomp.h
--- arpack++.orig/include/arugcomp.h	2009-10-20 02:59:32.000000000 -0700
+++ arpack++.patched/include/arugcomp.h	2009-10-22 19:49:54.000000000 -0700
@@ -3,7 +3,7 @@
    c++ interface to ARPACK code.
 
    MODULE ARUGComp.h.
-   Arpack++ class ARluCompGenEig definition
+   Arpack++ class ARumCompGenEig definition
    (umfpack version).
 
    ARPACK Authors
@@ -28,7 +28,7 @@
 
 
 template<class ARFLOAT>
-class ARluCompGenEig:
+class ARumCompGenEig:
   public virtual
     ARCompGenEig<ARFLOAT, ARumNonSymPencil<arcomplex<ARFLOAT>, ARFLOAT >,
                  ARumNonSymPencil<arcomplex<ARFLOAT>, ARFLOAT > > {
@@ -41,7 +41,7 @@ class ARluCompGenEig:
 
  // b) Protected functions:
 
-  virtual void Copy(const ARluCompGenEig& other);
+  virtual void Copy(const ARumCompGenEig& other);
   // Makes a deep copy of "other" over "this" object.
   // Old values are not deleted (this function is to be used
   // by the copy constructor and the assignment operator only).
@@ -61,44 +61,44 @@ class ARluCompGenEig:
 
  // c.2) Constructors and destructor.
 
-  ARluCompGenEig() { }
+  ARumCompGenEig() { }
   // Short constructor.
 
-  ARluCompGenEig(int nevp, ARumNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
+  ARumCompGenEig(int nevp, ARumNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
                  ARumNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& B,
                  char* whichp = "LM", int ncvp = 0,
                  ARFLOAT tolp = 0.0, int maxitp = 0,
                  arcomplex<ARFLOAT>* residp = NULL, bool ishiftp = true);
   // Long constructor (regular mode).
 
-  ARluCompGenEig(int nevp, ARumNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
+  ARumCompGenEig(int nevp, ARumNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
                  ARumNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& B,
                  arcomplex<ARFLOAT> sigma, char* whichp = "LM",
                  int ncvp = 0, ARFLOAT tolp = 0.0, int maxitp = 0,
                  arcomplex<ARFLOAT>* residp = NULL, bool ishiftp = true);
   // Long constructor (shift and invert mode).
 
-  ARluCompGenEig(const ARluCompGenEig& other) { Copy(other); }
+  ARumCompGenEig(const ARumCompGenEig& other) { Copy(other); }
   // Copy constructor.
 
-  virtual ~ARluCompGenEig() { }
+  virtual ~ARumCompGenEig() { }
 
  // d) Operators.
 
-  ARluCompGenEig& operator=(const ARluCompGenEig& other);
+  ARumCompGenEig& operator=(const ARumCompGenEig& other);
   // Assignment operator.
 
-}; // class ARluCompGenEig.
+}; // class ARumCompGenEig.
 
 
 // ------------------------------------------------------------------------ //
-// ARluCompGenEig member functions definition.                              //
+// ARumCompGenEig member functions definition.                              //
 // ------------------------------------------------------------------------ //
 
 
 template<class ARFLOAT>
-inline void ARluCompGenEig<ARFLOAT>::
-Copy(const ARluCompGenEig<ARFLOAT>& other)
+inline void ARumCompGenEig<ARFLOAT>::
+Copy(const ARumCompGenEig<ARFLOAT>& other)
 {
 
   ARCompGenEig<ARFLOAT, ARumNonSymPencil<arcomplex<ARFLOAT>, ARFLOAT >,
@@ -111,7 +111,7 @@ Copy(const ARluCompGenEig<ARFLOAT>& othe
 
 
 template<class ARFLOAT>
-inline void ARluCompGenEig<ARFLOAT>::
+inline void ARumCompGenEig<ARFLOAT>::
 ChangeShift(arcomplex<ARFLOAT> sigmaRp)
 {
 
@@ -122,7 +122,7 @@ ChangeShift(arcomplex<ARFLOAT> sigmaRp)
 
 
 template<class ARFLOAT>
-inline void ARluCompGenEig<ARFLOAT>::SetRegularMode()
+inline void ARumCompGenEig<ARFLOAT>::SetRegularMode()
 {
 
   ARStdEig<ARFLOAT, arcomplex<ARFLOAT>,
@@ -134,7 +134,7 @@ inline void ARluCompGenEig<ARFLOAT>::Set
 
 
 template<class ARFLOAT>
-inline void ARluCompGenEig<ARFLOAT>::
+inline void ARumCompGenEig<ARFLOAT>::
 SetShiftInvertMode(arcomplex<ARFLOAT> sigmap)
 {
 
@@ -147,8 +147,8 @@ SetShiftInvertMode(arcomplex<ARFLOAT> si
 
 
 template<class ARFLOAT>
-inline ARluCompGenEig<ARFLOAT>::
-ARluCompGenEig(int nevp, ARumNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
+inline ARumCompGenEig<ARFLOAT>::
+ARumCompGenEig(int nevp, ARumNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
                ARumNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& B, char* whichp,
                int ncvp, ARFLOAT tolp, int maxitp,
                arcomplex<ARFLOAT>* residp, bool ishiftp)
@@ -167,8 +167,8 @@ ARluCompGenEig(int nevp, ARumNonSymMatri
 
 
 template<class ARFLOAT>
-inline ARluCompGenEig<ARFLOAT>::
-ARluCompGenEig(int nevp, ARumNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
+inline ARumCompGenEig<ARFLOAT>::
+ARumCompGenEig(int nevp, ARumNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
                ARumNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& B,
                arcomplex<ARFLOAT> sigmap, char* whichp, int ncvp,
                ARFLOAT tolp, int maxitp, arcomplex<ARFLOAT>* residp,
@@ -188,8 +188,8 @@ ARluCompGenEig(int nevp, ARumNonSymMatri
 
 
 template<class ARFLOAT>
-ARluCompGenEig<ARFLOAT>& ARluCompGenEig<ARFLOAT>::
-operator=(const ARluCompGenEig<ARFLOAT>& other)
+ARumCompGenEig<ARFLOAT>& ARumCompGenEig<ARFLOAT>::
+operator=(const ARumCompGenEig<ARFLOAT>& other)
 {
 
   if (this != &other) { // Stroustrup suggestion.
diff -rupN arpack++.orig/include/arugnsym.h arpack++.patched/include/arugnsym.h
--- arpack++.orig/include/arugnsym.h	2009-10-20 02:59:32.000000000 -0700
+++ arpack++.patched/include/arugnsym.h	2009-10-22 19:50:11.000000000 -0700
@@ -3,7 +3,7 @@
    c++ interface to ARPACK code.
 
    MODULE ARUGNSym.h.
-   Arpack++ class ARluNonSymGenEig definition
+   Arpack++ class ARumNonSymGenEig definition
    (umfpack version).
 
    ARPACK Authors
@@ -27,7 +27,7 @@
 
 
 template<class ARFLOAT>
-class ARluNonSymGenEig:
+class ARumNonSymGenEig:
   public virtual ARNonSymGenEig<ARFLOAT, ARumNonSymPencil<ARFLOAT, ARFLOAT>,
                                 ARumNonSymPencil<ARFLOAT, ARFLOAT> > {
 
@@ -39,7 +39,7 @@ class ARluNonSymGenEig:
 
  // b) Protected functions:
 
-  virtual void Copy(const ARluNonSymGenEig& other);
+  virtual void Copy(const ARumNonSymGenEig& other);
   // Makes a deep copy of "other" over "this" object.
   // Old values are not deleted (this function is to be used
   // by the copy constructor and the assignment operator only).
@@ -62,51 +62,51 @@ class ARluNonSymGenEig:
 
  // c.2) Constructors and destructor.
 
-  ARluNonSymGenEig() { }
+  ARumNonSymGenEig() { }
   // Short constructor.
 
-  ARluNonSymGenEig(int nevp, ARumNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+  ARumNonSymGenEig(int nevp, ARumNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                    ARumNonSymMatrix<ARFLOAT, ARFLOAT>& B, char* whichp = "LM",
                    int ncvp = 0, ARFLOAT tolp = 0.0, int maxitp = 0,
                    ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (regular mode).
 
-  ARluNonSymGenEig(int nevp, ARumNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+  ARumNonSymGenEig(int nevp, ARumNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                    ARumNonSymMatrix<ARFLOAT, ARFLOAT>& B, ARFLOAT sigma,
                    char* whichp = "LM", int ncvp = 0,
                    ARFLOAT tolp = 0.0, int maxitp = 0,
                    ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (real shift and invert mode).
 
-  ARluNonSymGenEig(int nevp, ARumNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+  ARumNonSymGenEig(int nevp, ARumNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                    ARumNonSymMatrix<ARFLOAT, ARFLOAT>& B, char partp,
                    ARFLOAT sigmaRp, ARFLOAT sigmaIp, char* whichp = "LM",
                    int ncvp = 0, ARFLOAT tolp = 0.0, int maxitp = 0,
                    ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (complex shift and invert mode).
 
-  ARluNonSymGenEig(const ARluNonSymGenEig& other) { Copy(other); }
+  ARumNonSymGenEig(const ARumNonSymGenEig& other) { Copy(other); }
   // Copy constructor.
 
-  virtual ~ARluNonSymGenEig() { }
+  virtual ~ARumNonSymGenEig() { }
   // Destructor.
 
  // d) Operators.
 
-  ARluNonSymGenEig& operator=(const ARluNonSymGenEig& other);
+  ARumNonSymGenEig& operator=(const ARumNonSymGenEig& other);
   // Assignment operator.
 
-}; // class ARluNonSymGenEig.
+}; // class ARumNonSymGenEig.
 
 
 // ------------------------------------------------------------------------ //
-// ARluNonSymGenEig member functions definition.                            //
+// ARumNonSymGenEig member functions definition.                            //
 // ------------------------------------------------------------------------ //
 
 
 template<class ARFLOAT>
-inline void ARluNonSymGenEig<ARFLOAT>::
-Copy(const ARluNonSymGenEig<ARFLOAT>& other)
+inline void ARumNonSymGenEig<ARFLOAT>::
+Copy(const ARumNonSymGenEig<ARFLOAT>& other)
 {
 
   ARNonSymGenEig<ARFLOAT, ARumNonSymPencil<ARFLOAT, ARFLOAT>,
@@ -120,7 +120,7 @@ Copy(const ARluNonSymGenEig<ARFLOAT>& ot
 
 
 template<class ARFLOAT>
-inline void ARluNonSymGenEig<ARFLOAT>::
+inline void ARumNonSymGenEig<ARFLOAT>::
 ChangeShift(ARFLOAT sigmaRp, ARFLOAT sigmaIp)
 {
 
@@ -136,7 +136,7 @@ ChangeShift(ARFLOAT sigmaRp, ARFLOAT sig
 
 
 template<class ARFLOAT>
-inline void ARluNonSymGenEig<ARFLOAT>::SetRegularMode()
+inline void ARumNonSymGenEig<ARFLOAT>::SetRegularMode()
 {
 
   ARStdEig<ARFLOAT, ARFLOAT, ARumNonSymPencil<ARFLOAT, ARFLOAT> >::
@@ -146,7 +146,7 @@ inline void ARluNonSymGenEig<ARFLOAT>::S
 
 
 template<class ARFLOAT>
-inline void ARluNonSymGenEig<ARFLOAT>::SetShiftInvertMode(ARFLOAT sigmap)
+inline void ARumNonSymGenEig<ARFLOAT>::SetShiftInvertMode(ARFLOAT sigmap)
 {
 
   ARNonSymGenEig<ARFLOAT, ARumNonSymPencil<ARFLOAT, ARFLOAT>,
@@ -158,7 +158,7 @@ inline void ARluNonSymGenEig<ARFLOAT>::S
 
 
 template<class ARFLOAT>
-inline void ARluNonSymGenEig<ARFLOAT>::
+inline void ARumNonSymGenEig<ARFLOAT>::
 SetComplexShiftMode(char partp, ARFLOAT sigmaRp, ARFLOAT sigmaIp)
 {
 
@@ -172,8 +172,8 @@ SetComplexShiftMode(char partp, ARFLOAT 
 
 
 template<class ARFLOAT>
-inline ARluNonSymGenEig<ARFLOAT>::
-ARluNonSymGenEig(int nevp, ARumNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+inline ARumNonSymGenEig<ARFLOAT>::
+ARumNonSymGenEig(int nevp, ARumNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                  ARumNonSymMatrix<ARFLOAT, ARFLOAT>& B, char* whichp, int ncvp,
                  ARFLOAT tolp, int maxitp, ARFLOAT* residp, bool ishiftp)
 
@@ -190,8 +190,8 @@ ARluNonSymGenEig(int nevp, ARumNonSymMat
 
 
 template<class ARFLOAT>
-inline ARluNonSymGenEig<ARFLOAT>::
-ARluNonSymGenEig(int nevp, ARumNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+inline ARumNonSymGenEig<ARFLOAT>::
+ARumNonSymGenEig(int nevp, ARumNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                  ARumNonSymMatrix<ARFLOAT, ARFLOAT>& B, ARFLOAT sigmap,
                  char* whichp, int ncvp, ARFLOAT tolp,
                  int maxitp, ARFLOAT* residp, bool ishiftp)
@@ -209,8 +209,8 @@ ARluNonSymGenEig(int nevp, ARumNonSymMat
 
 
 template<class ARFLOAT>
-inline ARluNonSymGenEig<ARFLOAT>::
-ARluNonSymGenEig(int nevp, ARumNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+inline ARumNonSymGenEig<ARFLOAT>::
+ARumNonSymGenEig(int nevp, ARumNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                  ARumNonSymMatrix<ARFLOAT, ARFLOAT>& B, 
                  char partp, ARFLOAT sigmaRp,
                  ARFLOAT sigmaIp, char* whichp, int ncvp, ARFLOAT tolp,
@@ -229,8 +229,8 @@ ARluNonSymGenEig(int nevp, ARumNonSymMat
 
 
 template<class ARFLOAT>
-ARluNonSymGenEig<ARFLOAT>& ARluNonSymGenEig<ARFLOAT>::
-operator=(const ARluNonSymGenEig<ARFLOAT>& other)
+ARumNonSymGenEig<ARFLOAT>& ARumNonSymGenEig<ARFLOAT>::
+operator=(const ARumNonSymGenEig<ARFLOAT>& other)
 {
 
   if (this != &other) { // Stroustrup suggestion.
diff -rupN arpack++.orig/include/arugsym.h arpack++.patched/include/arugsym.h
--- arpack++.orig/include/arugsym.h	2009-10-20 02:59:32.000000000 -0700
+++ arpack++.patched/include/arugsym.h	2009-10-22 19:50:25.000000000 -0700
@@ -3,7 +3,7 @@
    c++ interface to ARPACK code.
 
    MODULE ARUGSym.h.
-   Arpack++ class ARluSymGenEig definition
+   Arpack++ class ARumSymGenEig definition
    (UMFPACK version).
 
    ARPACK Authors
@@ -28,7 +28,7 @@
 
 
 template<class ARFLOAT>
-class ARluSymGenEig:
+class ARumSymGenEig:
   public virtual ARSymGenEig<ARFLOAT, ARumSymPencil<ARFLOAT>,
                              ARumSymPencil<ARFLOAT> > {
 
@@ -40,7 +40,7 @@ class ARluSymGenEig:
 
  // b) Protected functions:
 
-  virtual void Copy(const ARluSymGenEig& other);
+  virtual void Copy(const ARumSymGenEig& other);
   // Makes a deep copy of "other" over "this" object.
   // Old values are not deleted (this function is to be used
   // by the copy constructor and the assignment operator only).
@@ -64,43 +64,43 @@ class ARluSymGenEig:
 
  // c.2) Constructors and destructor.
 
-  ARluSymGenEig() { }
+  ARumSymGenEig() { }
   // Short constructor.
 
-  ARluSymGenEig(int nevp, ARumSymMatrix<ARFLOAT>& A,
+  ARumSymGenEig(int nevp, ARumSymMatrix<ARFLOAT>& A,
                 ARumSymMatrix<ARFLOAT>& B, char* whichp = "LM",
                 int ncvp = 0, ARFLOAT tolp = 0.0, int maxitp = 0,
                 ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (regular mode).
 
-  ARluSymGenEig(char InvertModep, int nevp, ARumSymMatrix<ARFLOAT>& A,
+  ARumSymGenEig(char InvertModep, int nevp, ARumSymMatrix<ARFLOAT>& A,
                 ARumSymMatrix<ARFLOAT>& B, ARFLOAT sigma, char* whichp = "LM", 
                 int ncvp = 0, ARFLOAT tolp = 0.0, int maxitp = 0,
                 ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (shift and invert, buckling and Cayley modes).
 
-  ARluSymGenEig(const ARluSymGenEig& other) { Copy(other); }
+  ARumSymGenEig(const ARumSymGenEig& other) { Copy(other); }
   // Copy constructor.
 
-  virtual ~ARluSymGenEig() { }
+  virtual ~ARumSymGenEig() { }
   // Destructor.
 
  // d) Operators.
 
-  ARluSymGenEig& operator=(const ARluSymGenEig& other);
+  ARumSymGenEig& operator=(const ARumSymGenEig& other);
   // Assignment operator.
 
-}; // class ARluSymGenEig.
+}; // class ARumSymGenEig.
 
 
 // ------------------------------------------------------------------------ //
-// ARluSymGenEig member functions definition.                               //
+// ARumSymGenEig member functions definition.                               //
 // ------------------------------------------------------------------------ //
 
 
 template<class ARFLOAT>
-inline void ARluSymGenEig<ARFLOAT>::
-Copy(const ARluSymGenEig<ARFLOAT>& other)
+inline void ARumSymGenEig<ARFLOAT>::
+Copy(const ARumSymGenEig<ARFLOAT>& other)
 {
 
   ARSymGenEig<ARFLOAT, ARumSymPencil<ARFLOAT>,
@@ -114,7 +114,7 @@ Copy(const ARluSymGenEig<ARFLOAT>& other
 
 
 template<class ARFLOAT>
-inline void ARluSymGenEig<ARFLOAT>::ChangeShift(ARFLOAT sigmap)
+inline void ARumSymGenEig<ARFLOAT>::ChangeShift(ARFLOAT sigmap)
 {
 
   this->objOP->FactorAsB(sigmap);
@@ -124,7 +124,7 @@ inline void ARluSymGenEig<ARFLOAT>::Chan
 
 
 template<class ARFLOAT>
-inline void ARluSymGenEig<ARFLOAT>::SetRegularMode()
+inline void ARumSymGenEig<ARFLOAT>::SetRegularMode()
 {
 
   ARStdEig<ARFLOAT, ARFLOAT, ARumSymPencil<ARFLOAT> >::
@@ -134,7 +134,7 @@ inline void ARluSymGenEig<ARFLOAT>::SetR
 
 
 template<class ARFLOAT>
-inline void ARluSymGenEig<ARFLOAT>::
+inline void ARumSymGenEig<ARFLOAT>::
 SetShiftInvertMode(ARFLOAT sigmap)
 {
 
@@ -146,7 +146,7 @@ SetShiftInvertMode(ARFLOAT sigmap)
 
 
 template<class ARFLOAT>
-inline void ARluSymGenEig<ARFLOAT>::
+inline void ARumSymGenEig<ARFLOAT>::
 SetBucklingMode(ARFLOAT sigmap)
 {
 
@@ -158,7 +158,7 @@ SetBucklingMode(ARFLOAT sigmap)
 
 
 template<class ARFLOAT>
-inline void ARluSymGenEig<ARFLOAT>::
+inline void ARumSymGenEig<ARFLOAT>::
 SetCayleyMode(ARFLOAT sigmap)
 {
 
@@ -171,8 +171,8 @@ SetCayleyMode(ARFLOAT sigmap)
 
 
 template<class ARFLOAT>
-inline ARluSymGenEig<ARFLOAT>::
-ARluSymGenEig(int nevp, ARumSymMatrix<ARFLOAT>& A,
+inline ARumSymGenEig<ARFLOAT>::
+ARumSymGenEig(int nevp, ARumSymMatrix<ARFLOAT>& A,
               ARumSymMatrix<ARFLOAT>& B, char* whichp, int ncvp,
               ARFLOAT tolp, int maxitp, ARFLOAT* residp, bool ishiftp)
 
@@ -190,8 +190,8 @@ ARluSymGenEig(int nevp, ARumSymMatrix<AR
 
 
 template<class ARFLOAT>
-inline ARluSymGenEig<ARFLOAT>::
-ARluSymGenEig(char InvertModep, int nevp, ARumSymMatrix<ARFLOAT>& A,
+inline ARumSymGenEig<ARFLOAT>::
+ARumSymGenEig(char InvertModep, int nevp, ARumSymMatrix<ARFLOAT>& A,
               ARumSymMatrix<ARFLOAT>& B, ARFLOAT sigmap,
               char* whichp, int ncvp, ARFLOAT tolp,
               int maxitp, ARFLOAT* residp, bool ishiftp)
@@ -218,8 +218,8 @@ ARluSymGenEig(char InvertModep, int nevp
 
 
 template<class ARFLOAT>
-ARluSymGenEig<ARFLOAT>& ARluSymGenEig<ARFLOAT>::
-operator=(const ARluSymGenEig<ARFLOAT>& other)
+ARumSymGenEig<ARFLOAT>& ARumSymGenEig<ARFLOAT>::
+operator=(const ARumSymGenEig<ARFLOAT>& other)
 {
 
   if (this != &other) { // Stroustrup suggestion.
diff -rupN arpack++.orig/include/aruscomp.h arpack++.patched/include/aruscomp.h
--- arpack++.orig/include/aruscomp.h	2009-10-20 02:59:32.000000000 -0700
+++ arpack++.patched/include/aruscomp.h	2009-10-22 19:50:46.000000000 -0700
@@ -3,7 +3,7 @@
    c++ interface to ARPACK code.
 
    MODULE ARUSComp.h.
-   Arpack++ class ARluCompStdEig definition
+   Arpack++ class ARumCompStdEig definition
    (umfpack version).
 
    ARPACK Authors
@@ -27,7 +27,7 @@
 
 
 template<class ARFLOAT>
-class ARluCompStdEig:
+class ARumCompStdEig:
   public virtual ARCompStdEig<ARFLOAT, 
                               ARumNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT> > {
 
@@ -45,43 +45,43 @@ class ARluCompStdEig:
 
  // a.2) Constructors and destructor.
 
-  ARluCompStdEig() { }
+  ARumCompStdEig() { }
   // Short constructor.
 
-  ARluCompStdEig(int nevp, ARumNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A, 
+  ARumCompStdEig(int nevp, ARumNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
                  char* whichp = "LM", int ncvp = 0,
                  ARFLOAT tolp = 0.0, int maxitp = 0,
                  arcomplex<ARFLOAT>* residp = NULL, bool ishiftp = true);
   // Long constructor (regular mode).
 
-  ARluCompStdEig(int nevp, ARumNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
+  ARumCompStdEig(int nevp, ARumNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
                  arcomplex<ARFLOAT> sigma, char* whichp = "LM",
                  int ncvp = 0, ARFLOAT tolp = 0.0, int maxitp = 0,
                  arcomplex<ARFLOAT>* residp = NULL, bool ishiftp = true);
   // Long constructor (shift and invert mode).
 
-  ARluCompStdEig(const ARluCompStdEig& other) { Copy(other); }
+  ARumCompStdEig(const ARumCompStdEig& other) { Copy(other); }
   // Copy constructor.
 
-  virtual ~ARluCompStdEig() { }
+  virtual ~ARumCompStdEig() { }
   // Destructor.
 
 
  // b) Operators.
 
-  ARluCompStdEig& operator=(const ARluCompStdEig& other);
+  ARumCompStdEig& operator=(const ARumCompStdEig& other);
   // Assignment operator.
 
-}; // class ARluCompStdEig.
+}; // class ARumCompStdEig.
 
 
 // ------------------------------------------------------------------------ //
-// ARluCompStdEig member functions definition.                              //
+// ARumCompStdEig member functions definition.                              //
 // ------------------------------------------------------------------------ //
 
 
 template<class ARFLOAT>
-inline void ARluCompStdEig<ARFLOAT>::
+inline void ARumCompStdEig<ARFLOAT>::
 ChangeShift(arcomplex<ARFLOAT> sigmaRp)
 {
 
@@ -92,7 +92,7 @@ ChangeShift(arcomplex<ARFLOAT> sigmaRp)
 
 
 template<class ARFLOAT>
-inline void ARluCompStdEig<ARFLOAT>::SetRegularMode()
+inline void ARumCompStdEig<ARFLOAT>::SetRegularMode()
 {
 
   ARStdEig<ARFLOAT, arcomplex<ARFLOAT>, 
@@ -104,7 +104,7 @@ inline void ARluCompStdEig<ARFLOAT>::Set
 
 
 template<class ARFLOAT>
-inline void ARluCompStdEig<ARFLOAT>::
+inline void ARumCompStdEig<ARFLOAT>::
 SetShiftInvertMode(arcomplex<ARFLOAT> sigmap)
 {
 
@@ -117,8 +117,8 @@ SetShiftInvertMode(arcomplex<ARFLOAT> si
 
 
 template<class ARFLOAT>
-inline ARluCompStdEig<ARFLOAT>::
-ARluCompStdEig(int nevp, ARumNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
+inline ARumCompStdEig<ARFLOAT>::
+ARumCompStdEig(int nevp, ARumNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
                char* whichp, int ncvp, ARFLOAT tolp,
                int maxitp, arcomplex<ARFLOAT>* residp, bool ishiftp)
 
@@ -133,8 +133,8 @@ ARluCompStdEig(int nevp, ARumNonSymMatri
 
 
 template<class ARFLOAT>
-inline ARluCompStdEig<ARFLOAT>::
-ARluCompStdEig(int nevp, ARumNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
+inline ARumCompStdEig<ARFLOAT>::
+ARumCompStdEig(int nevp, ARumNonSymMatrix<arcomplex<ARFLOAT>, ARFLOAT>& A,
                arcomplex<ARFLOAT> sigmap, char* whichp, int ncvp,
                ARFLOAT tolp, int maxitp, arcomplex<ARFLOAT>* residp,
                bool ishiftp)
@@ -150,8 +150,8 @@ ARluCompStdEig(int nevp, ARumNonSymMatri
 
 
 template<class ARFLOAT>
-ARluCompStdEig<ARFLOAT>& ARluCompStdEig<ARFLOAT>::
-operator=(const ARluCompStdEig<ARFLOAT>& other)
+ARumCompStdEig<ARFLOAT>& ARumCompStdEig<ARFLOAT>::
+operator=(const ARumCompStdEig<ARFLOAT>& other)
 {
 
   if (this != &other) { // Stroustrup suggestion.
diff -rupN arpack++.orig/include/arusnsym.h arpack++.patched/include/arusnsym.h
--- arpack++.orig/include/arusnsym.h	2009-10-20 02:59:32.000000000 -0700
+++ arpack++.patched/include/arusnsym.h	2009-10-22 19:51:10.000000000 -0700
@@ -3,7 +3,7 @@
    c++ interface to ARPACK code.
 
    MODULE ARUSNSym.h.
-   Arpack++ class ARluNonSymStdEig definition
+   Arpack++ class ARumNonSymStdEig definition
    (umfpack version).
 
    ARPACK Authors
@@ -26,7 +26,7 @@
 
 
 template<class ARFLOAT>
-class ARluNonSymStdEig:
+class ARumNonSymStdEig:
   public virtual ARNonSymStdEig<ARFLOAT, ARumNonSymMatrix<ARFLOAT, ARFLOAT> > {
 
  public:
@@ -43,42 +43,42 @@ class ARluNonSymStdEig:
 
  // a.2) Constructors and destructor.
 
-  ARluNonSymStdEig() { }
+  ARumNonSymStdEig() { }
   // Short constructor.
 
-  ARluNonSymStdEig(int nevp, ARumNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+  ARumNonSymStdEig(int nevp, ARumNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                    char* whichp = "LM", int ncvp = 0,
                    ARFLOAT tolp = 0.0, int maxitp = 0,
                    ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (regular mode).
 
-  ARluNonSymStdEig(int nevp, ARumNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+  ARumNonSymStdEig(int nevp, ARumNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                    ARFLOAT sigma, char* whichp = "LM", int ncvp = 0,
                    ARFLOAT tolp = 0.0, int maxitp = 0,
                    ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (shift and invert mode).
 
-  ARluNonSymStdEig(const ARluNonSymStdEig& other) { Copy(other); }
+  ARumNonSymStdEig(const ARumNonSymStdEig& other) { Copy(other); }
   // Copy constructor.
 
-  virtual ~ARluNonSymStdEig() { }
+  virtual ~ARumNonSymStdEig() { }
   // Destructor.
 
  // b) Operators.
 
-  ARluNonSymStdEig& operator=(const ARluNonSymStdEig& other);
+  ARumNonSymStdEig& operator=(const ARumNonSymStdEig& other);
   // Assignment operator.
 
-}; // class ARluNonSymStdEig.
+}; // class ARumNonSymStdEig.
 
 
 // ------------------------------------------------------------------------ //
-// ARluNonSymStdEig member functions definition.                            //
+// ARumNonSymStdEig member functions definition.                            //
 // ------------------------------------------------------------------------ //
 
 
 template<class ARFLOAT>
-inline void ARluNonSymStdEig<ARFLOAT>::ChangeShift(ARFLOAT sigmaRp)
+inline void ARumNonSymStdEig<ARFLOAT>::ChangeShift(ARFLOAT sigmaRp)
 {
 
   this->sigmaR    = sigmaRp;
@@ -93,7 +93,7 @@ inline void ARluNonSymStdEig<ARFLOAT>::C
 
 
 template<class ARFLOAT>
-inline void ARluNonSymStdEig<ARFLOAT>::SetRegularMode()
+inline void ARumNonSymStdEig<ARFLOAT>::SetRegularMode()
 {
 
   ARStdEig<ARFLOAT, ARFLOAT, ARumNonSymMatrix<ARFLOAT, ARFLOAT> >::
@@ -103,7 +103,7 @@ inline void ARluNonSymStdEig<ARFLOAT>::S
 
 
 template<class ARFLOAT>
-inline void ARluNonSymStdEig<ARFLOAT>::SetShiftInvertMode(ARFLOAT sigmap)
+inline void ARumNonSymStdEig<ARFLOAT>::SetShiftInvertMode(ARFLOAT sigmap)
 {
 
   ARStdEig<ARFLOAT, ARFLOAT, ARumNonSymMatrix<ARFLOAT, ARFLOAT> >::
@@ -114,8 +114,8 @@ inline void ARluNonSymStdEig<ARFLOAT>::S
 
 
 template<class ARFLOAT>
-inline ARluNonSymStdEig<ARFLOAT>::
-ARluNonSymStdEig(int nevp, ARumNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+inline ARumNonSymStdEig<ARFLOAT>::
+ARumNonSymStdEig(int nevp, ARumNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                  char* whichp, int ncvp, ARFLOAT tolp,
                  int maxitp, ARFLOAT* residp, bool ishiftp)
 
@@ -130,8 +130,8 @@ ARluNonSymStdEig(int nevp, ARumNonSymMat
 
 
 template<class ARFLOAT>
-inline ARluNonSymStdEig<ARFLOAT>::
-ARluNonSymStdEig(int nevp, ARumNonSymMatrix<ARFLOAT, ARFLOAT>& A,
+inline ARumNonSymStdEig<ARFLOAT>::
+ARumNonSymStdEig(int nevp, ARumNonSymMatrix<ARFLOAT, ARFLOAT>& A,
                  ARFLOAT sigmap, char* whichp, int ncvp, ARFLOAT tolp,
                  int maxitp, ARFLOAT* residp, bool ishiftp)
 
@@ -146,8 +146,8 @@ ARluNonSymStdEig(int nevp, ARumNonSymMat
 
 
 template<class ARFLOAT>
-ARluNonSymStdEig<ARFLOAT>& ARluNonSymStdEig<ARFLOAT>::
-operator=(const ARluNonSymStdEig<ARFLOAT>& other)
+ARumNonSymStdEig<ARFLOAT>& ARumNonSymStdEig<ARFLOAT>::
+operator=(const ARumNonSymStdEig<ARFLOAT>& other)
 {
 
   if (this != &other) { // Stroustrup suggestion.
diff -rupN arpack++.orig/include/arussym.h arpack++.patched/include/arussym.h
--- arpack++.orig/include/arussym.h	2009-10-20 02:59:32.000000000 -0700
+++ arpack++.patched/include/arussym.h	2009-10-22 19:51:22.000000000 -0700
@@ -3,7 +3,7 @@
    c++ interface to ARPACK code.
 
    MODULE ARUSSym.h.
-   Arpack++ class ARluSymStdEig definition
+   Arpack++ class ARumSymStdEig definition
    (UMFPACK version).
 
    ARPACK Authors
@@ -26,7 +26,7 @@
 
 
 template<class ARFLOAT>
-class ARluSymStdEig:
+class ARumSymStdEig:
   public virtual ARSymStdEig<ARFLOAT, ARumSymMatrix<ARFLOAT> > {
 
  public:
@@ -43,42 +43,42 @@ class ARluSymStdEig:
 
  // a.2) Constructors and destructor.
 
-  ARluSymStdEig() { }
+  ARumSymStdEig() { }
   // Short constructor.
 
-  ARluSymStdEig(int nevp, ARumSymMatrix<ARFLOAT>& A,
+  ARumSymStdEig(int nevp, ARumSymMatrix<ARFLOAT>& A,
                 char* whichp = "LM", int ncvp = 0,
                 ARFLOAT tolp = 0.0, int maxitp = 0,
                 ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (regular mode).
 
-  ARluSymStdEig(int nevp, ARumSymMatrix<ARFLOAT>& A,
+  ARumSymStdEig(int nevp, ARumSymMatrix<ARFLOAT>& A,
                 ARFLOAT sigma, char* whichp = "LM", int ncvp = 0,
                 ARFLOAT tolp = 0.0, int maxitp = 0,
                 ARFLOAT* residp = NULL, bool ishiftp = true);
   // Long constructor (shift and invert mode).
 
-  ARluSymStdEig(const ARluSymStdEig& other) { Copy(other); }
+  ARumSymStdEig(const ARumSymStdEig& other) { Copy(other); }
   // Copy constructor.
 
-  virtual ~ARluSymStdEig() { }
+  virtual ~ARumSymStdEig() { }
   // Destructor.
 
  // b) Operators.
 
-  ARluSymStdEig& operator=(const ARluSymStdEig& other);
+  ARumSymStdEig& operator=(const ARumSymStdEig& other);
   // Assignment operator.
 
-}; // class ARluSymStdEig.
+}; // class ARumSymStdEig.
 
 
 // ------------------------------------------------------------------------ //
-// ARluSymStdEig member functions definition.                               //
+// ARumSymStdEig member functions definition.                               //
 // ------------------------------------------------------------------------ //
 
 
 template<class ARFLOAT>
-inline void ARluSymStdEig<ARFLOAT>::ChangeShift(ARFLOAT sigmaRp)
+inline void ARumSymStdEig<ARFLOAT>::ChangeShift(ARFLOAT sigmaRp)
 {
 
   this->sigmaR    = sigmaRp;
@@ -93,7 +93,7 @@ inline void ARluSymStdEig<ARFLOAT>::Chan
 
 
 template<class ARFLOAT>
-inline void ARluSymStdEig<ARFLOAT>::SetRegularMode()
+inline void ARumSymStdEig<ARFLOAT>::SetRegularMode()
 {
 
   ARStdEig<ARFLOAT, ARFLOAT, ARumSymMatrix<ARFLOAT> >::
@@ -103,7 +103,7 @@ inline void ARluSymStdEig<ARFLOAT>::SetR
 
 
 template<class ARFLOAT>
-inline void ARluSymStdEig<ARFLOAT>::SetShiftInvertMode(ARFLOAT sigmap)
+inline void ARumSymStdEig<ARFLOAT>::SetShiftInvertMode(ARFLOAT sigmap)
 {
 
   ARStdEig<ARFLOAT, ARFLOAT, ARumSymMatrix<ARFLOAT> >::
@@ -113,8 +113,8 @@ inline void ARluSymStdEig<ARFLOAT>::SetS
 
 
 template<class ARFLOAT>
-inline ARluSymStdEig<ARFLOAT>::
-ARluSymStdEig(int nevp, ARumSymMatrix<ARFLOAT>& A,
+inline ARumSymStdEig<ARFLOAT>::
+ARumSymStdEig(int nevp, ARumSymMatrix<ARFLOAT>& A,
               char* whichp, int ncvp, ARFLOAT tolp,
               int maxitp, ARFLOAT* residp, bool ishiftp)
 {
@@ -127,8 +127,8 @@ ARluSymStdEig(int nevp, ARumSymMatrix<AR
 
 
 template<class ARFLOAT>
-inline ARluSymStdEig<ARFLOAT>::
-ARluSymStdEig(int nevp, ARumSymMatrix<ARFLOAT>& A,
+inline ARumSymStdEig<ARFLOAT>::
+ARumSymStdEig(int nevp, ARumSymMatrix<ARFLOAT>& A,
               ARFLOAT sigmap, char* whichp, int ncvp, ARFLOAT tolp,
               int maxitp, ARFLOAT* residp, bool ishiftp)
 
@@ -142,8 +142,8 @@ ARluSymStdEig(int nevp, ARumSymMatrix<AR
 
 
 template<class ARFLOAT>
-ARluSymStdEig<ARFLOAT>& ARluSymStdEig<ARFLOAT>::
-operator=(const ARluSymStdEig<ARFLOAT>& other)
+ARumSymStdEig<ARFLOAT>& ARumSymStdEig<ARFLOAT>::
+operator=(const ARumSymStdEig<ARFLOAT>& other)
 {
 
   if (this != &other) { // Stroustrup suggestion.
