--- G3D.lib/source/FileSystem.cpp	2010-06-28 21:09:35.000000000 -0400
+++ /Users/mixamolaptop3/Downloads/G3D/G3D.lib/source/FileSystem.cpp	2012-09-14 03:13:41.000000000 -0400
@@ -12,7 +12,12 @@
 #include "G3D/fileutils.h"
 #include <sys/stat.h>
 #include <sys/types.h>
-#include "zip.h"
+#include <cmath>
+
+#ifdef G3D_ENABLE_ZLIB
+#  include "zip.h"
+#endif
+
 #include "G3D/g3dfnmatch.h"
 #include "G3D/BinaryInput.h"
 #include "G3D/BinaryOutput.h"
@@ -78,6 +83,7 @@
 }
     
 void FileSystem::Dir::computeZipListing(const std::string& zipfile, const std::string& pathInsideZipfile) {
+#ifdef G3D_ENABLE_ZLIB
     struct zip* z = zip_open( FilePath::removeTrailingSlash(zipfile).c_str(), ZIP_CHECKCONS, NULL );
     debugAssert(z);
 
@@ -126,6 +132,9 @@
     
     zip_close(z);
     z = NULL;
+#else
+    throw "No zlib support, can't open zip files";
+#endif
 }
 
 
@@ -247,15 +256,15 @@
 
     // Look at all sub-paths containing periods.
     // For each, ask if it is a zipfile.
-    int current = 0;
+    size_t current = 0;
     current = path.find('.', current);
 
-    while (current != -1) {
+    while (current != std::string::npos) {
         // xxxxx/foo.zip/yyyyy
         current = path.find('.', current);
 
         // Look forward for the next slash
-        int s = findSlash(path, current);
+        int s = findSlash(path, (int)current);
 
         if (s == -1) {
             // No more slashes
@@ -483,7 +492,7 @@
                         // working directory on that drive.
                         debugAssertM(false, "Files of the form d:path are"
                                      " not supported (use a fully qualified"
-                                     " name).");
+                                     " name) [filename = " + filename + "].");
                         return filename;
                     }
                 }
@@ -520,7 +529,8 @@
 int64 FileSystem::_size(const std::string& filename) {
     struct stat64 st;
     int result = stat64(filename.c_str(), &st);
-    
+
+#ifdef G3D_ENABLE_ZLIB
     if (result == -1) {
         std::string zip, contents;
         if (zipfileExists(filename, zip, contents)) {
@@ -541,7 +551,11 @@
             return -1;
         }
     }
-    
+#else
+    if (result == -1)
+      return -1;
+#endif
+
     return st.st_size;
 }
 
@@ -603,7 +617,7 @@
         for (int i = 0; bufData[i] != '\0'; ++i) {
             const char* thisString = bufData + i;
             m_winDrive.append(toLower(thisString));
-            i += strlen(thisString) + 1;
+            i += (int)strlen(thisString) + 1;
         }
     }
 
@@ -663,8 +677,8 @@
 
 
 std::string FilePath::ext(const std::string& filename) {
-    int i = filename.rfind(".");
-    if (i >= 0) {
+    std::size_t i = filename.rfind(".");
+    if (i != std::string::npos) {
         return filename.substr(i + 1, filename.length() - i);
     } else {
         return "";
@@ -676,9 +690,9 @@
     int i = findLastSlash(filename);
 
 #   ifdef G3D_WIN32
-        int j = filename.rfind(":");
-        if ((i == -1) && (j >= 0)) {
-            i = j;
+        size_t j = filename.rfind(":");
+        if ((i == -1) && (j != std::string::npos)) {
+            i = (int)j;
         }
 #   endif
 
@@ -692,8 +706,8 @@
 
 std::string FilePath::base(const std::string& path) {
     std::string filename = baseExt(path);
-    int i = filename.rfind(".");
-    if (i == -1) {
+    std::size_t i = filename.rfind(".");
+    if (i == std::string::npos) {
         // No extension
         return filename;
     } else {
@@ -706,9 +720,9 @@
     int i = findLastSlash(removeTrailingSlash(path));
 
 #   ifdef G3D_WIN32
-        int j = path.rfind(":");
-        if ((i == -1) && (j >= 0)) {
-            i = j;
+        size_t j = path.rfind(":");
+        if ((i == -1) && (j != std::string::npos)) {
+            i = (int)j;
         }
 #   endif
 
@@ -801,7 +815,7 @@
 
         if (i != std::string::npos) {
             // Make sure it is after the last slash!
-            size_t j = iMax(f.rfind('/'), f.rfind('\\'));
+            size_t j = std::max(f.rfind('/'), f.rfind('\\'));
             if ((j == std::string::npos) || (i > j)) {
                 ext = f.substr(i + 1, f.size() - i - 1);
                 f = f.substr(0, i);
@@ -812,7 +826,7 @@
     // Pull the basename off
     {
         // Find the last slash
-        size_t i = iMax(f.rfind('/'), f.rfind('\\'));
+        size_t i = std::max(f.rfind('/'), f.rfind('\\'));
         
         if (i == std::string::npos) {
             
@@ -845,7 +859,7 @@
             j = f.size();
         }
 
-        cur = iMin(i, j);
+        cur = std::min(i, j);
 
         if (cur == std::string::npos) {
             cur = f.size();
