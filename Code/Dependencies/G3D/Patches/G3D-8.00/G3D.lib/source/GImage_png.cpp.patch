--- G3D.lib/source/GImage_png.cpp	2010-04-20 00:41:43.000000000 -0400
+++ ../../../../../../Downloads/G3D.lib/source/GImage_png.cpp	2012-08-21 01:15:50.000000000 -0400
@@ -9,10 +9,14 @@
 #include "G3D/BinaryInput.h"
 #include "G3D/BinaryOutput.h"
 #include "G3D/Log.h"
-#include <png.h>
+
+#ifdef G3D_ENABLE_ZLIB
+#  include "../../png.lib/include/png.h"
+#endif
 
 namespace G3D {
 
+#ifdef G3D_ENABLE_ZLIB
 
 //libpng required function signature
 static void png_read_data(
@@ -67,10 +71,12 @@
     Log::common()->println(warning_msg);
 }
 
+#endif
 
 void GImage::encodePNG(
     BinaryOutput&           out) const {
 
+#ifdef G3D_ENABLE_ZLIB
     if (! (m_channels == 1 || m_channels == 3 || m_channels == 4)) {
         throw GImage::Error(format("Illegal channels for PNG: %d", m_channels), out.getFilename());
     }
@@ -159,12 +165,16 @@
     delete[] row_pointers;
 
     png_destroy_write_struct(&png_ptr, &info_ptr);
+#else
+    throw "No zlib support, can't encode PNG";
+#endif
 }
 
 
 void GImage::decodePNG(
     BinaryInput&        input) {
 
+#ifdef G3D_ENABLE_ZLIB
     png_structp png_ptr = png_create_read_struct(PNG_LIBPNG_VER_STRING, NULL, png_error, png_warning);
     if (png_ptr == NULL) {
         throw GImage::Error("Unable to initialize PNG decoder.", input.getFilename());
@@ -271,6 +281,9 @@
     png_read_end(png_ptr, info_ptr);
 
     png_destroy_read_struct(&png_ptr, &info_ptr, &end_info);
+#else
+    throw "No zlib support, can't encode PNG";
+#endif
 }
 
 }
